<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2021-06-06 晴</title>
    <url>/2021/06/06/2021-06-06/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="593f97f067c1ba00f52ebea19727506c4edd183107bf40934e3328b5f0a4b5fd">c8880461037ab8b889509f03c403f352b20948bf01a97aecf5864b916c0b0628f2296542801e71a847d5f4ce1241301e240256069c11db0be52535f9fd8f7cfab2188afd71a50ff563903252ca22b8d902891d1027f47b8f607aaaa9346b111a376cb736b7a3c1a2e7243850075b61752a56001dfce45af49a669afef89d5dd4e74e3a0f783c32de4fa3611fb57442e34198cc170c433ebb504a5d947f02960c2c55b2fa42927aa281660395980210645602e2bc6d959cf235ceef01f4e2f03c9dcf6bed94d46ae861461767584d2a4c3b6279fa340fcf9e17c2b6fedfe69bcc5c41a1e4cc1979b5f5bf738073c6e612af92933096840ca38d0a71a9f6c00c41b76d7f51bafb15482f997d413136c598609314d5250ea922f7eaca1ac46eac92c78ee750f61d545188b3ba5e5b58c90cc990edcaa1790a8d0072e4ea7a5b0435ae116488f2a4f632d17b1019f5873054f0e4cb203c0442da04a653f49b77fc830d0389b623a0ac09791dc0656b052579cfc0ad0b7fa45a2470a3b7c9b76669ea1f3eda3c44c420385319d9785d38087ad4712f8f1f8b78d64f03460e220f9bb218226d966db05b25516a62b8584e648e3ffcb02725e1aaa88d9080cb039444a65b12a949a295f7e2962edb0be5ccc8db02c433d178b2c6d21c797f30cdbc388342a68e65e3d8514d7c8b33a92dbb96e892cc5cf56181554fa7c565a497e16c60e31c11efeb72fa579dc7035e555303f5559c1460b94a9aa6bbfb8539ec4316c392311d02a99cc8ac3e1d203521c839b32a362decffa8cecc4dbe2b4606221fb12886b87c4bee91ea5585b1846d14f089352136f3ee55a56f0a08689a9499885584276ae0400934b33cf6fdc3c2da4d6491319b61e645b6d96cd8f716bbb12c153eb7d650432a46d53f66a97df1ee624a4fed701f92839295667a97ca38d4dd81ad239e44bfd98513128c7dc73039bf136a874969f17b1386f2789951ce50bd49da25d8cfd2841cd316453578f0c75d15fb5eaa671cf9d74d2a63eee651d54fdf81a2a7a130affd0ae90270c187c512ffae4b248ebe5e3b9ca12b8174f41d629ef9cd27adbc9f28eef47626ca82f5ad957f05ad37c4b1674d21ee1524db3bdf759a590951fe85f714e4f0a0ee3d827cf68e7bc6e91baeaa6d5e88ac80bef02e5bdb3d0f4cf7fe0e49df2f8265038e0e9c1a5afe8d3e8d2d5e21d2c60981dad1d6c7b73560d860403d02c48c059656e57250e4fd1ad73f549f2c656ced31d905faf4317490dec5a4dea20e2b63a23f18645b7078131663f27190f38deeb06e6e9597cef60b5fa113bb4df46cc4b5ab5c3ed6c71c5de5b1e77e7fa6cb9be5e39c19415c074da714b7d1fb8ab506d76359609f12df98be617da3ec79e3dc7233a4d9a185c4396a35166aba1ecd8e1151fdd3dea42d60c0821ab4520fe22e3f701fab6b7dec1dc1ba300de3cd7fd2c87aac1791287f9cdc3f6186ddc59ab1ecb97d5dfcaa8607e7c228f2efa319b30c4b81a260214a4e6e048d0621ca2783a03257fec12f46c83ea8c1e01d5a3bf0289acee11fe41fad22b89330b3dba8e4ad0399766cf84bfccc502b84ad7c92fdc3b621be47457dd1ead23256b8345f08ad4bc02b74251ea10873ebb08cec980b55e153103342156eb9cb212fdf85c90b2d668e8c6a0c058159fe24d24fe83577386d04c3a3fcb79c6f24a0461f69f4ca17c6a0eb6a314e9ecea121d85ace440a09dbadc3c1805c865650fa4db8a061b0b35bbf7e28fe4c8e9245ce1c8471e644161037aa18b8e237b8c5c731f41654f7c71c38874171786627d72b004f11583956519f6ad2a17e2d38a826009df35c6367c522a5b0eec008c39a06ef063f7d2a8f77d863c0f51dae16fe25477dfec14065a47a639e049530367988bc48f8d0d9d4a6ea69cdec6f2a2df54b768b013d8586de7aca1ab409a103ad0970b2e800b3475c5b9f7e84f958ea8d55f660ffbf8a89960802e34f3daf74a8e152743d20fab16f97d36d38106eec9fb6ed3bcfd2d27ab3490065c119fd4a411227c6d5f6d5fa79df7ba0a501a9a4a87db2846aa9ec58f94f16dd2fb5171a8c20f58295cb4498d61cd6e9c67a807427d8f4592a711991b3a266eeec2b11722d61d0eba8c17bc13b2a4ed262366200cc592aeeda459a93dccb7b67d9e83461e66e7e9e4709a7194968f5f09d309a83224496bc44ef4ea487cd3bc4055d007781b681cb2c202c0f172fe70405775c7a3dc77f7f230de83906453abb12a8a6283d7c915028b1c764173746a01af9fa86b22baa2e648db20c4a65e39adc7d3ac7b6d3b19499b183595bf7d936c07510ec2aed66c27b36d95f67cee97557410269c2191df44069a869c3108aff23aa08213cf70254e9d353ee9f130a25e918900cf10584fbd1f7e899de4ae7d0b1f34597e6f0b7eb0919a37920ce09409e60db79fe1819c1378c5b28c719c0d42671e05d2ac242cbd977cffa47698053af9809c490a14082f0b81b5fca68f78ed9e4f956f8207821a12773c8b3a40940de7d7dee4b87937cb226b24b287ccfa188d069daad4a0a80ae461c3c8c4e6a2590aabd1f62101697d760fc2fb18238ca1b5ce0610756b356467d814a168a351c7e8391a284d6dc1e377f7037630885a27043302bfb7729f3a3e791ca16b01a4d16873a8e0be0fd924c997137ac3d18e1f5653b384ac18610cbb8e419315c479992afad17d7b3f0587427aea104d123743940e5ab52ae401065024a25558f73967df8406fbb3dc1a3c4901f91bd68343319bdfd4108985eb68808b5f99d732588c73dcc7e5327d292af8e06fa7c6c2b823f185b9088a70efaf45a4fc1cc73f115669d293935e2209eb1edc5e903c4815a839605dee89b8c48a361c41d15085e9a91f1dd55e7529c17e00a1c19bc865b676666a01fc73e914b8ca2451fadc5136157a586b7487f1517197cc9d3d175c0eeb5ca5ac8593d989ae7edcb5c6915df13b58983d3bd96c27b3af4660602d1ba514ac10ebc3df636faf072717aff80894aad8051a40e9fab21ba7edecfe502e3a43beb9886dd55a1d5e0d475f616a565f8aae5cf80a62f28c070d425fec4759518d25d24b6cb54842b9f9d42e73d7fdba9b74cb17863a927c221f0185bbd471dd7eaf155030f9462a2e4b3a6eda9d643631cf19535104a22915c20436a2d347baef0d5b37dc236dbbd91cbc4cac23b6918e2b140adf506e9c2262342edb5d6e2c0dee047eba5853d65c39bb144ce1c950c5617fa5858b02dda9077fa0273e985cf33c481f92e921323a8871f3df6d7787b28b3ae9648d854a08c49ae0505bce9a57dbfa0163f84de843476714beb76fb38d11f231e682d183bed4e1d48549c832df1c52c69307aad37c30d10a231f22885203b90dc808c32b80605684efb1e7d51ddfd50ebd805f6e7b2a89152d2304693ced779b6c4765600d6065e878731489629f4e544118d14d8a7f694f97cbec24361a7e1174b3e018dda2000fde3f3e70c5becf17533eb297b265de85bb43f328f90d9b2434ac9cc5721a8b9a30367467026b59593ac7f8e6eade19a82d9c051212d9e288bb42eab13604ec685bef389db7738d86510623416e66475f76c65ac5c725da1105f755446f4770f2116a606842006a830b80ba6f0d4a5ae1d4566242b4d1d12fad5356e2eafd6570abeebc73b9f4fbbf400c89c1a73fc4f4756b5457309f71514034d716700faf806d42fe41d11102f5e95ccdefb2160877d3913ddb192a1888c38285178736270ff64d5b28bf4b3d61b31b8fbf2193f2a30b8429a</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Diary</category>
      </categories>
  </entry>
  <entry>
    <title>2021-06-07 晴</title>
    <url>/2021/06/07/2021-06-07/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="6a1591adc1fe3326f1933a645dcd238a9dea5f0fbacaaafd6b1e4644430bdeb6">ff0d3d951818acbba61da79748983b6a46c5823816fcbd10bb3598e68bd5308f2f65e1a7a0612baff104a45277ebb5838e1c49b0b9de51d921645d7a87a1769b2d212969cfad3c64320508b9b4d8a1bb34fd329e21ac39304c2479ab8eed6fb39cdb4960f4a9513e07b64f2c444531cc3673fac0be83767027f7a00c4fffc606f2493261b4e36602f9b876d085d8a02ae11e3bbb9a3d0bccce01538b13992b4a6a7a20dc5893d927d1e2f8e8280f5ca1499b1ed34d4657f705742982e0ae6cf8dbd9462bdf3cb971edbd7397d8d8e2df658f36b1a6a91aa4ec67055349cde5b51c6ccab9ec1361c0196c2f74a0cdfd4c949cf2d4ff29f927e0420da71f4bcffcc03711143bd612a46958031efc51c6d8d08680a35bc0324348c3b85941fd90855a0eb59b4fd2ab3fca5242e0fb52db6e4fca1ad696f6770e66cdb6347c1d16a1a0b2808feb9fb8b68cdb5b4ee1cf08690966f4e67370466106ef043bed6310d094f0f55a40d60aba37dee36f2b261c980dd66790f1df6fab3672ff79ac2c6d3c033074101e4c548f47e2cad7718da3fc786892f099e9bf878182b2a4be93b733ba00cb9af3b0a1519d0350ae667497feffc7547b942db6e9ca9939128c16b2be53d700687e7ef3e3c6c64146bf61d6cfe8902ebf7a30a6c450d66cf25fdedf2e9f066818d4b940ab972b2ed65046cfa61a45a1d65c1658c8b1f323e33077bade8444491504754dfa32cc4c517e4dea43055ab7700720ea5cef81f713f14d8b30271d51c6941962cce69d5bc240dbe845ad5a15895be1f8b183570fa416d4bc4578868e89fa38eca2d42716586ea94a0bb5818bae535ecfb4053cd3cef358e9a192f19f84c7cc93ce19333b8fe51d2225151cc7aa1a98682974eb5df364286858ff1a37d7a89f3983cfbd585d48979cfbd71382ae53b1f676807c2b1b2bfc15dd5e8127e9fce70d811c0db405f865b7e560d7d5af1915c101dfe8768bebd347138ccec3a5420d2a060731a71fe2f754d3aeedab10a8b2177d39ee0b4d0218db019e9a84ad99b1a610c470d8d37967f3540a50f170afa3b3498c5318c86501a7b402e92cae75938ac528214bb73ff8aae767468ecc382d03102b6bf6fec51e66b8f480421478a09f10a7d883a9032aaffcc3f6bea7a3274d9f7850c61aa9deaccd81ea9aebf285b43eadc0f9926b8335cbeb1192e40085aa718ae179583cff41319482fa574f222666c6ec133ebb011ac58ca63889c8f2fffcf16bdc4bafa8da4bf8f3217a5b16e11799b49df43afafe31ca53cf9dc2b6275ee48a5caa813b07edd109d12d6680dc970f9baae6a37b38839e47dc01a0b2c865ee0d6b037e07dc2d8924bb4fe4921314913ae809474803c8ffec12913e766ff2a45fcacece7167e567dd8d4bea3a27adf6516c2f3cfa4e4c24f656b362be88e6d6fe64ee8bc49c5d5e9050c7c4eeb0f8702e31397a0ebfa3fef4c5ce28b97a581a19779deec7284a10cea204472d91f3bc2b171f52b2e835f52bdb58c7d87262c3acb388f6e7110458e5f28b12508e29f787f403083ec2772128132f22fff97cb0f7fff45119b954a7c56ced888e700b437bd5280bbc17242be7033f93f1f5cd09336000f8e14b907885bae4788df59e30e184ed5cd6016268e29b077d8dae0394d7b97662f5648114a444b5125aefb7be00ab5e4cde6ec59f8d2b070a9011da0edd73c3e9061e43918e9b4c0d61f5d058acda9816397eba70374d21560fba31c5f07e7ed9f5c76b5815cf32db701925150ea5c52a9917bfe5e4463e90c191030a4bec4ea7a20105d3707e10b520b8f1ffd12473b6a20980df96ab38e1d423b814d4de1a75c7c5f0</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Diary</category>
      </categories>
  </entry>
  <entry>
    <title>Unicorn引擎在ctf中的应用</title>
    <url>/2021/06/07/Unicorn%E5%BC%95%E6%93%8E%E5%9C%A8ctf%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<span id="more"></span>

<h3 id="Unicorn常用接口"><a href="#Unicorn常用接口" class="headerlink" title="Unicorn常用接口"></a>Unicorn常用接口</h3><p><strong>mu = mu = unicorn.Uc(arch,mode)</strong>    创建一个unicorn实例对象。arch：cpu架构；mode：指令体系。</p>
<ul>
<li>  mu = unicorn.Uc(unicorn.UC_ARCH_X86,unicorn.UC_MODE_64)</li>
<li>  mu = unicorn.Uc(unicorn.UC_ARCH_X86,unicorn.UC_MODE_32)</li>
<li>  mu = unicorn.Uc(unicorn.UC_ARCH_ARM,unicorn.UC_MODE_ARM)</li>
<li>  mu = unicorn.Uc(unicorn.UC_ARCH_ARM,unicorn.UC_MODE_ARM64)</li>
<li>  mu = unicorn.Uc(unicorn.UC_ARCH_ARM,unicorn.UC_MODE_THUMB)</li>
</ul>
<p><strong>mu.mem_map(addr, size)</strong>    映射一块内存区域。addr：地址起始位置；size：映射大小。</p>
<p><strong>mu.mem_write(addr, data)</strong>    向内存写入数据。addr：写入地址；data：待写入的数据。</p>
<p><strong>data = mu.mem_read(addr, size)</strong>    从内存读取数据。addr：读取地址；size：读取大小。</p>
<p><strong>mu.reg_write(reg, data)</strong>    设置寄存器的值。reg：寄存器代号；data：数值。</p>
<p><strong>data = mu.reg_read(reg)</strong>    读取寄存器的值。reg：寄存器代号。</p>
<p><strong>mu.mem_start(start_addr,end_addr)</strong>    开始执行代码。start_addr：模拟执行起始位置；end_addr：模拟执行结束位置。</p>
<p><strong>代码跟踪</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hook_code</span>(<span class="params">mu, address, size, user_data</span>):</span> </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&gt;&gt;&gt; Tracing instruction at 0x%x, instruction size = 0x%x&#x27;</span> %(address, size)) </span><br><span class="line"> </span><br><span class="line">mu.hook_add(UC_HOOK_CODE, hook_code)</span><br></pre></td></tr></table></figure>

<p>这段代码添加了一个HOOK（向Unicorn引擎中），我们定义的函数会在执行每一条命令之前被执行。参数含义如下：</p>
<ul>
<li>  <code>Uc</code>实例</li>
<li>  指令的地址</li>
<li>  指令的长度</li>
<li>  用户定义数据（通过<code>hook_add()</code>函数传递）</li>
</ul>
<h3 id="Unicorn在X86-64架构上的使用"><a href="#Unicorn在X86-64架构上的使用" class="headerlink" title="Unicorn在X86-64架构上的使用"></a>Unicorn在X86-64架构上的使用</h3><p>前面说了这么多，似乎还是没有体验到Unicron的强大之处。下面开始实操部分。</p>
<p>拿到一个不知道那年的ctf题，直接跑起来，发现只要运行就能跑出来flag，但是运算速度却让人大跌眼镜，可能跑一天也跑不出来。</p>
<p><img src="http://inews.gtimg.com/newsapp_ls/0/13621426659/0" alt="image-20210607001752013"></p>
<p>仔细看看代码吧，逻辑很简单，就是一个函数在不断递归，代码量不大，做到这很多人第一反应就是重构代码，实现相同的逻辑然后在优化算法的思路。然而对于一些代码量大的题，重构代码是一件很伤人的事，一不小心就是有bug，往往写的代码与源程序结果不一样，对着代码修bug是一件很费时间的事。但是用到Unicon就可以直接掉用关键函数，完全是省略了重构步骤。</p>
<p>开始解题，这里直接上脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> unicorn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> unicorn.x86_const <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line">stack = []</span><br><span class="line">dic = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#模拟执行开始地址</span></span><br><span class="line">fun_start = <span class="number">0x0000000000400670</span></span><br><span class="line"><span class="comment">#模拟执行结束地址</span></span><br><span class="line">fun_end = [<span class="number">0x00000000004006F1</span>, <span class="number">0x0000000000400709</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#遇到系统函数的调用直接跳过</span></span><br><span class="line">instructions_skip_list = [<span class="number">0x00000000004004EF</span>, <span class="number">0x00000000004004F6</span>, <span class="number">0x0000000000400502</span>, <span class="number">0x000000000040054F</span>]</span><br><span class="line"></span><br><span class="line">base_addr = <span class="number">0x400000</span></span><br><span class="line">base_size = <span class="number">1024</span>*<span class="number">1024</span></span><br><span class="line"></span><br><span class="line">stack_addr = <span class="number">0x0</span></span><br><span class="line">stack_size = <span class="number">1024</span> * <span class="number">1024</span></span><br><span class="line"></span><br><span class="line">start_addr = <span class="number">0x00000000004004E0</span></span><br><span class="line">end_addr = <span class="number">0x0000000000400575</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建unicorn示例对象</span></span><br><span class="line">mu = Uc(UC_ARCH_X86,UC_MODE_64)</span><br><span class="line"></span><br><span class="line"><span class="comment">#映射内存</span></span><br><span class="line">mu.mem_map(base_addr,base_size)</span><br><span class="line">mu.mem_map(stack_addr,stack_size)</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取执行文件数据</span></span><br><span class="line">code = <span class="built_in">open</span>(<span class="string">&quot;C:\\Users\\fang\Desktop\\fibonacci&quot;</span>,<span class="string">&quot;rb&quot;</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="comment">#向映射的内存写入执行文件数据</span></span><br><span class="line">mu.mem_write(base_addr,code)</span><br><span class="line"></span><br><span class="line"><span class="comment">#初始化栈顶指针</span></span><br><span class="line">mu.reg_write(UC_X86_REG_RSP,stack_size+stack_addr-<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">u32</span>(<span class="params">data</span>):</span></span><br><span class="line">    <span class="keyword">return</span> struct.unpack(<span class="string">&quot;I&quot;</span>, data)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">p32</span>(<span class="params">num</span>):</span></span><br><span class="line">    <span class="keyword">return</span> struct.pack(<span class="string">&quot;I&quot;</span>, num)</span><br><span class="line"></span><br><span class="line"><span class="comment">#回调函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hook_code</span>(<span class="params">mu,address,size,user_data</span>):</span></span><br><span class="line">    <span class="comment">#print(&#x27;&gt;&gt;&gt; Tracing instruction at 0x%x, instruction size = 0x%x&#x27; % (address, size))</span></span><br><span class="line">    <span class="keyword">if</span> address <span class="keyword">in</span> instructions_skip_list:</span><br><span class="line">        mu.reg_write(UC_X86_REG_RIP,address + size)</span><br><span class="line">    <span class="keyword">elif</span> address == <span class="number">0x400560</span>:  <span class="comment"># that instruction writes a byte of the flag</span></span><br><span class="line">        c = mu.reg_read(UC_X86_REG_RDI)</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(c),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        mu.reg_write(UC_X86_REG_RIP, address + size)</span><br><span class="line">    <span class="keyword">elif</span> address == fun_start:</span><br><span class="line">        arg0 = mu.reg_read(UC_X86_REG_RDI)</span><br><span class="line">        rsi = mu.reg_read(UC_X86_REG_RSI)</span><br><span class="line">        arg1 = u32(mu.mem_read(rsi,<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (arg0,arg1) <span class="keyword">in</span> dic:</span><br><span class="line">            (ret_rax,ret_ref) = dic[(arg0,arg1)]</span><br><span class="line">            mu.reg_write(UC_X86_REG_RAX,ret_rax)</span><br><span class="line">            mu.mem_write(rsi,p32(ret_ref))</span><br><span class="line">            mu.reg_write(UC_X86_REG_RIP,<span class="number">0x400582</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            stack.append((arg0,arg1,rsi))</span><br><span class="line">    <span class="keyword">elif</span> address <span class="keyword">in</span> fun_end:</span><br><span class="line">        (arg0,arg1,rsi) = stack.pop()</span><br><span class="line"></span><br><span class="line">        ret_rax = mu.reg_read(UC_X86_REG_RAX)</span><br><span class="line">        ret_ref = u32(mu.mem_read(rsi,<span class="number">4</span>))</span><br><span class="line">        dic[(arg0,arg1)] = (ret_rax,ret_ref)</span><br><span class="line"></span><br><span class="line">mu.hook_add(UC_HOOK_CODE,hook_code)</span><br><span class="line"></span><br><span class="line">mu.emu_start(start_addr,end_addr)</span><br></pre></td></tr></table></figure>

<p>算法优化思路：根据递归函数有两个参数，第一个参数是一个值，第二个参数是一个指针，发现函数只是返回一个值，和改变第二个参数指针所指的值，且第二个参数只是取值0/1，故可以动态记录每一对输入对应的输出，然后在每一次执行递归函数前，读取参数，比较记录的table如果这一对输入已经被记录过结果便可以直接给对应的位置附上table中的结果，不用在走递归函数流程。</p>
<p><img src="http://inews.gtimg.com/newsapp_ls/0/13621426674/0" alt="image-20210607003929056"></p>
<h3 id="Unicorn在ARM-THUMB架构上的使用"><a href="#Unicorn在ARM-THUMB架构上的使用" class="headerlink" title="Unicorn在ARM-THUMB架构上的使用"></a>Unicorn在ARM-THUMB架构上的使用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> unicorn</span><br><span class="line"><span class="keyword">from</span> unicorn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> unicorn.arm_const <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> capstone <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">mu = Uc(UC_ARCH_ARM,UC_MODE_THUMB)</span><br><span class="line">cs = Cs(CS_ARCH_ARM,CS_MODE_THUMB)</span><br><span class="line">cs.detail = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">base_addr = <span class="number">0x0</span></span><br><span class="line">base_size = <span class="number">1024</span>*<span class="number">1024</span></span><br><span class="line"></span><br><span class="line">stack_addr = <span class="number">1024</span>*<span class="number">1024</span></span><br><span class="line">stack_size = <span class="number">1024</span>*<span class="number">1024</span>*<span class="number">10</span></span><br><span class="line"></span><br><span class="line">code = <span class="built_in">open</span>(<span class="string">&quot;C:\\Users\\fang\Desktop\\libcrack.so&quot;</span>,<span class="string">&quot;rb&quot;</span>).read()</span><br><span class="line"></span><br><span class="line">mu.mem_map(base_addr,base_size)</span><br><span class="line">mu.mem_map(stack_addr,stack_size)</span><br><span class="line"></span><br><span class="line">mu.mem_write(base_addr,code)</span><br><span class="line">mu.reg_write(UC_ARM_REG_SP,stack_addr + stack_size - <span class="number">48</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">input</span> = <span class="string">b&quot;\x01\x02\x03\x04\x05\x06\x07\x08\x09\x00\x01\x02\x03\x04\x05\x06&quot;</span></span><br><span class="line">key = <span class="string">b&quot;wonderfulday!!!!\x00&quot;</span></span><br><span class="line">R0_addr = stack_addr</span><br><span class="line">R1_addr = stack_addr + <span class="number">1024</span></span><br><span class="line">R2_addr = stack_addr + <span class="number">1024</span>*<span class="number">2</span></span><br><span class="line"></span><br><span class="line">mu.mem_write(R2_addr,<span class="string">b&#x27;\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00&#x27;</span>)</span><br><span class="line">mu.mem_write(R1_addr,key)</span><br><span class="line">mu.mem_write(R0_addr,<span class="built_in">input</span>)</span><br><span class="line"></span><br><span class="line">mu.reg_write(UC_ARM_REG_R0,R0_addr)</span><br><span class="line">mu.reg_write(UC_ARM_REG_R1,R1_addr)</span><br><span class="line">mu.reg_write(UC_ARM_REG_R2,R2_addr)</span><br><span class="line">mu.reg_write(UC_ARM_REG_LR,<span class="number">0xC54A</span>)</span><br><span class="line"></span><br><span class="line">start_addr = <span class="number">0x7DFC</span></span><br><span class="line">end_addr = <span class="number">0x7E3A</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hook_code</span>(<span class="params">mu, address, size, user_data</span>):</span></span><br><span class="line">    <span class="comment"># print(&#x27;&gt;&gt;&gt; Tracing instruction at 0x%x, instruction size = 0x%x&#x27; % (address, size))</span></span><br><span class="line">    inst_code = mu.mem_read(address,size)</span><br><span class="line">    <span class="keyword">for</span> inst <span class="keyword">in</span> cs.disasm(inst_code,address):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[addr:%X]:\t%s\t%s&quot;</span> % (inst.address,inst.mnemonic,inst.op_str))</span><br><span class="line"></span><br><span class="line">mu.hook_add(UC_HOOK_CODE, hook_code)</span><br><span class="line"></span><br><span class="line">mu.emu_start(start_addr + <span class="number">1</span>,end_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment"># sp = mu.reg_read(UC_ARM_REG_SP)</span></span><br><span class="line"><span class="comment"># print(sp + 0x418 - 0x374 + 8)</span></span><br><span class="line">output = mu.mem_read(R2_addr,<span class="number">16</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">list</span>(output):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">hex</span>(i),end=<span class="string">&#x27;,&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><strong>附件：</strong></p>
<p>链接：<a href="https://pan.baidu.com/s/1FRObdq3gNqA8XpGL_LBs3A">https://pan.baidu.com/s/1FRObdq3gNqA8XpGL_LBs3A</a><br>提取码：86ct</p>
<p>链接：<a href="https://pan.baidu.com/s/16AnPL5kQbvcB1JAigMwbJQ">https://pan.baidu.com/s/16AnPL5kQbvcB1JAigMwbJQ</a><br>提取码：5dju </p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>安卓调试</tag>
        <tag>Unicorn</tag>
      </tags>
  </entry>
  <entry>
    <title>Unicorn之模拟调用so文件</title>
    <url>/2021/06/03/Unicorn/</url>
    <content><![CDATA[<span id="more"></span>

<h3 id="一、Unicorn中的接口"><a href="#一、Unicorn中的接口" class="headerlink" title="一、Unicorn中的接口"></a>一、Unicorn中的接口</h3><h5 id="1、内存相关"><a href="#1、内存相关" class="headerlink" title="1、内存相关"></a>1、内存相关</h5><ul>
<li>  uc_mem_map</li>
<li>  uc_mem_write</li>
<li>  uc_mem_read</li>
</ul>
<h5 id="2、寄存器相关"><a href="#2、寄存器相关" class="headerlink" title="2、寄存器相关"></a>2、寄存器相关</h5><ul>
<li>  uc_reg_write</li>
<li>  uc_reg_read</li>
</ul>
<p><strong>TEST</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> unicorn</span><br><span class="line"><span class="keyword">import</span> capstone</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Test_Arm32_Thumb</span>():</span></span><br><span class="line">    <span class="comment">#硬编码</span></span><br><span class="line">    CODE = <span class="string">b&#x27;\x0a\x46\x03\x46&#x27;</span></span><br><span class="line">    <span class="comment">#基地址</span></span><br><span class="line">    ADDRESS = <span class="number">0x1000</span></span><br><span class="line">    <span class="comment">#映射大小</span></span><br><span class="line">    SIZE = <span class="number">1024</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#创建反汇编引擎对象</span></span><br><span class="line">    CP = capstone.Cs(capstone.CS_ARCH_ARM,capstone.CS_MODE_THUMB)</span><br><span class="line">    <span class="comment">#读取反汇编代码</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> CP.disasm(CODE,ADDRESS):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[addr:%X]:\t%s\t%s&quot;</span> % (i.address,i.mnemonic,i.op_str))</span><br><span class="line"></span><br><span class="line">    <span class="comment">#创建虚拟机对象</span></span><br><span class="line">    mu = unicorn.Uc(unicorn.UC_ARCH_ARM,unicorn.UC_MODE_THUMB)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#映射内存</span></span><br><span class="line">    mu.mem_map(ADDRESS,SIZE)</span><br><span class="line">    <span class="comment">#往内存写入代码</span></span><br><span class="line">    mu.mem_write(ADDRESS,CODE)</span><br><span class="line">    <span class="comment">#读取指定内存地址，return：bytesarray</span></span><br><span class="line">    <span class="built_in">bytes</span> = mu.mem_read(ADDRESS,<span class="number">10</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;ADDRESS:%X,content:%s&quot;</span> % (ADDRESS,binascii.b2a_hex(<span class="built_in">bytes</span>)))</span><br><span class="line"></span><br><span class="line">    <span class="comment">#写入寄存器的值。arg_1：寄存器表达值，宏定义</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    UC_ARM_REG_R0 = 66</span></span><br><span class="line"><span class="string">    UC_ARM_REG_R1 = 67</span></span><br><span class="line"><span class="string">    UC_ARM_REG_R2 = 68</span></span><br><span class="line"><span class="string">    UC_ARM_REG_R3 = 69</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    mu.reg_write(unicorn.arm_const.UC_ARM_REG_R1,<span class="number">0x100</span>)</span><br><span class="line">    mu.reg_write(unicorn.arm_const.UC_ARM_REG_R0,<span class="number">0x200</span>)</span><br><span class="line"></span><br><span class="line">    reg_R3 = mu.reg_read(unicorn.arm_const.UC_ARM_REG_R3)</span><br><span class="line">    reg_R2 = mu.reg_read(unicorn.arm_const.UC_ARM_REG_R2)</span><br><span class="line">    reg_R1 = mu.reg_read(unicorn.arm_const.UC_ARM_REG_R1)</span><br><span class="line">    reg_R0 = mu.reg_read(unicorn.arm_const.UC_ARM_REG_R0)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-------before-------&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;reg_R0:%x&quot;</span> % (reg_R0))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;reg_R1:%x&quot;</span> % (reg_R1))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;reg_R3:%x&quot;</span> % (reg_R3))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;reg_R2:%x&quot;</span> % (reg_R2))</span><br><span class="line"></span><br><span class="line">    <span class="comment">#启动虚拟机执行代码。arg_1：开始地址、arg_2：结束地址</span></span><br><span class="line">    mu.emu_start(ADDRESS + <span class="number">1</span>,ADDRESS + <span class="built_in">len</span>(CODE))   <span class="comment">#ADDRESS + 1 ：是因为是执行Thumb格式代码，指令首地址都是奇数（很重要）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#读取寄存器的值。arg_1：寄存器表达值，宏定义</span></span><br><span class="line">    reg_R3 = mu.reg_read(unicorn.arm_const.UC_ARM_REG_R3)</span><br><span class="line">    reg_R2 = mu.reg_read(unicorn.arm_const.UC_ARM_REG_R2)</span><br><span class="line">    reg_R1 = mu.reg_read(unicorn.arm_const.UC_ARM_REG_R1)</span><br><span class="line">    reg_R0 = mu.reg_read(unicorn.arm_const.UC_ARM_REG_R0)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-------after-------&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;reg_R0:%x&quot;</span> % (reg_R0))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;reg_R1:%x&quot;</span> % (reg_R1))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;reg_R3:%x&quot;</span> % (reg_R3))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;reg_R2:%x&quot;</span> % (reg_R2))</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    Test_Arm32_Thumb()</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">output:</span></span><br><span class="line"><span class="string">[addr:1000]:	mov	r2, r1</span></span><br><span class="line"><span class="string">[addr:1002]:	mov	r3, r0</span></span><br><span class="line"><span class="string">ADDRESS:1000,content:b&#x27;0a460346000000000000&#x27;</span></span><br><span class="line"><span class="string">-------before-------</span></span><br><span class="line"><span class="string">reg_R0:200</span></span><br><span class="line"><span class="string">reg_R1:100</span></span><br><span class="line"><span class="string">reg_R3:0</span></span><br><span class="line"><span class="string">reg_R2:0</span></span><br><span class="line"><span class="string">-------after-------</span></span><br><span class="line"><span class="string">reg_R0:200</span></span><br><span class="line"><span class="string">reg_R1:100</span></span><br><span class="line"><span class="string">reg_R3:200</span></span><br><span class="line"><span class="string">reg_R2:100</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p><img src="http://inews.gtimg.com/newsapp_ls/0/13610781004/0" alt="image-20210526101043331"></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>安卓调试</tag>
        <tag>Unicorn</tag>
      </tags>
  </entry>
  <entry>
    <title>2021XCTF_FINAL APK</title>
    <url>/2021/06/06/2021XCTF_FINAL_APK/</url>
    <content><![CDATA[<span id="more"></span>

<h3 id="一、Java层分析"><a href="#一、Java层分析" class="headerlink" title="一、Java层分析"></a>一、Java层分析</h3><p>​    拿到apk直接丢进Jadx中进行Java层分析，刚看到MainActivity函数发现代码量不少，顿时感觉这题不简单，但也不要慌，仔细分析下来，发现几个可疑的函数：InMemoryDexClassLoader、BaseDexClassLoader。了解壳和动态dex加载原理的人一眼就可以发现这个init()函数只是在动态加载一个dex。</p>
<p><img src="http://inews.gtimg.com/newsapp_ls/0/13618498536/0" alt="image-20210606005557207"></p>
<p>由于没有真机运行环境，故只能找到dex数据流自己动手加载出来dex。很快便找到dex数据部分，是读取icon.png图片经过一系列操作生成的。</p>
<p><img src="http://inews.gtimg.com/newsapp_ls/0/13618498542/0" alt="image-20210606010006863"></p>
<p>这里可以把这段代码抄下来跑一遍就行(偷个懒)，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">		String fileName = <span class="string">&quot;.//icon.png&quot;</span>;</span><br><span class="line">		String fileName1 = <span class="string">&quot;.//111.dex&quot;</span>;</span><br><span class="line">		InputStream fis = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(fileName));</span><br><span class="line">		FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(fileName1));</span><br><span class="line">		ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">		<span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">		<span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">			<span class="keyword">int</span> bytesRead = fis.read(buffer,<span class="number">0</span>,buffer.length);</span><br><span class="line">			<span class="keyword">if</span> (bytesRead == -<span class="number">1</span>) &#123;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			baos.write(buffer,<span class="number">0</span>,bytesRead);</span><br><span class="line">		&#125;</span><br><span class="line">		baos.flush();</span><br><span class="line">		<span class="keyword">byte</span>[] dex = baos.toByteArray();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; dex.length; i ++) &#123;</span><br><span class="line">			dex[i] = (<span class="keyword">byte</span>) (dex[i] ^ -<span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		fos.write(dex,<span class="number">0</span>,dex.length);</span><br><span class="line">		fos.flush();</span><br><span class="line"> 		fos.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<pre><code> 接着分析新生成的dex文件，打开发现代码很清晰。关键代码在OOXX中，加密流程大致如下：先把flag进行tea加密(目前看来是tea)，然后回调com.ctf.play.MyCrack类的crack函数，发现是一个so层函数，等会在仔细分析。然后在进行tea加密，最后base64与com.ctf.play.MyCrack类的静态变量crypt比较。
</code></pre>
<p><img src="http://inews.gtimg.com/newsapp_ls/0/13618498548/0" alt="image-20210606011013270"></p>
<h3 id="二、so层分析"><a href="#二、so层分析" class="headerlink" title="二、so层分析"></a>二、so层分析</h3><p>​    ida打开，直接搜索crack函数发现没有找到，看来是动态注册或是加了混淆，先看JNI_OnLoad函数，发现东西还真是不少，字符串还做了异或处理。一看就有点像是反调试的代码，恢复一下字符串果真是防止frida注入。不过因为没有真机调试环境，所以这部分现在可以不用处理。在最后我们发现注册了一个cccc的函数。看来这就是我们要找的crack函数了。</p>
<p><img src="http://inews.gtimg.com/newsapp_ls/0/13618498559/0" alt="image-20210606011845928"></p>
<p>分析cccc函数发现和前面一样加了反frida的代码。关键函数是sub_7DFC，点进去看一下有点像AES算法，发现算法也不是很难，还是可以逆的。</p>
<p><img src="http://inews.gtimg.com/newsapp_ls/0/13618498565/0" alt="image-20210606012207605"></p>
<p><img src="http://inews.gtimg.com/newsapp_ls/0/13618498571/0" alt="image-20210606012227544"></p>
<p>算法代码如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BLOCK_SIZE  0x10</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> key_table[<span class="number">172</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> key[] = <span class="string">&quot;wonderfulday!!!!&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> byte_18CEC[] =</span><br><span class="line">        &#123;</span><br><span class="line">    <span class="number">0x8D</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x10</span>, <span class="number">0x20</span>, <span class="number">0x40</span>, <span class="number">0x80</span>, <span class="number">0x1B</span>,</span><br><span class="line">    <span class="number">0x36</span>, <span class="number">0x6C</span>, <span class="number">0xD8</span>, <span class="number">0xAB</span>, <span class="number">0x4D</span>, <span class="number">0x9A</span>, <span class="number">0x2F</span>, <span class="number">0x5E</span>, <span class="number">0xBC</span>, <span class="number">0x63</span>,</span><br><span class="line">    <span class="number">0xC6</span>, <span class="number">0x97</span>, <span class="number">0x35</span>, <span class="number">0x6A</span>, <span class="number">0xD4</span>, <span class="number">0xB3</span>, <span class="number">0x7D</span>, <span class="number">0xFA</span>, <span class="number">0xEF</span>, <span class="number">0xC5</span>,</span><br><span class="line">    <span class="number">0x91</span>, <span class="number">0x39</span>, <span class="number">0x72</span>, <span class="number">0xE4</span>, <span class="number">0xD3</span>, <span class="number">0xBD</span>, <span class="number">0x61</span>, <span class="number">0xC2</span>, <span class="number">0x9F</span>, <span class="number">0x25</span>,</span><br><span class="line">    <span class="number">0x4A</span>, <span class="number">0x94</span>, <span class="number">0x33</span>, <span class="number">0x66</span>, <span class="number">0xCC</span>, <span class="number">0x83</span>, <span class="number">0x1D</span>, <span class="number">0x3A</span>, <span class="number">0x74</span>, <span class="number">0xE8</span>,</span><br><span class="line">    <span class="number">0xCB</span>, <span class="number">0x8D</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x10</span>, <span class="number">0x20</span>, <span class="number">0x40</span>, <span class="number">0x80</span>,</span><br><span class="line">    <span class="number">0x1B</span>, <span class="number">0x36</span>, <span class="number">0x6C</span>, <span class="number">0xD8</span>, <span class="number">0xAB</span>, <span class="number">0x4D</span>, <span class="number">0x9A</span>, <span class="number">0x2F</span>, <span class="number">0x5E</span>, <span class="number">0xBC</span>,</span><br><span class="line">    <span class="number">0x63</span>, <span class="number">0xC6</span>, <span class="number">0x97</span>, <span class="number">0x35</span>, <span class="number">0x6A</span>, <span class="number">0xD4</span>, <span class="number">0xB3</span>, <span class="number">0x7D</span>, <span class="number">0xFA</span>, <span class="number">0xEF</span>,</span><br><span class="line">    <span class="number">0xC5</span>, <span class="number">0x91</span>, <span class="number">0x39</span>, <span class="number">0x72</span>, <span class="number">0xE4</span>, <span class="number">0xD3</span>, <span class="number">0xBD</span>, <span class="number">0x61</span>, <span class="number">0xC2</span>, <span class="number">0x9F</span>,</span><br><span class="line">    <span class="number">0x25</span>, <span class="number">0x4A</span>, <span class="number">0x94</span>, <span class="number">0x33</span>, <span class="number">0x66</span>, <span class="number">0xCC</span>, <span class="number">0x83</span>, <span class="number">0x1D</span>, <span class="number">0x3A</span>, <span class="number">0x74</span>,</span><br><span class="line">    <span class="number">0xE8</span>, <span class="number">0xCB</span>, <span class="number">0x8D</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x10</span>, <span class="number">0x20</span>, <span class="number">0x40</span>,</span><br><span class="line">    <span class="number">0x80</span>, <span class="number">0x1B</span>, <span class="number">0x36</span>, <span class="number">0x6C</span>, <span class="number">0xD8</span>, <span class="number">0xAB</span>, <span class="number">0x4D</span>, <span class="number">0x9A</span>, <span class="number">0x2F</span>, <span class="number">0x5E</span>,</span><br><span class="line">    <span class="number">0xBC</span>, <span class="number">0x63</span>, <span class="number">0xC6</span>, <span class="number">0x97</span>, <span class="number">0x35</span>, <span class="number">0x6A</span>, <span class="number">0xD4</span>, <span class="number">0xB3</span>, <span class="number">0x7D</span>, <span class="number">0xFA</span>,</span><br><span class="line">    <span class="number">0xEF</span>, <span class="number">0xC5</span>, <span class="number">0x91</span>, <span class="number">0x39</span>, <span class="number">0x72</span>, <span class="number">0xE4</span>, <span class="number">0xD3</span>, <span class="number">0xBD</span>, <span class="number">0x61</span>, <span class="number">0xC2</span>,</span><br><span class="line">    <span class="number">0x9F</span>, <span class="number">0x25</span>, <span class="number">0x4A</span>, <span class="number">0x94</span>, <span class="number">0x33</span>, <span class="number">0x66</span>, <span class="number">0xCC</span>, <span class="number">0x83</span>, <span class="number">0x1D</span>, <span class="number">0x3A</span>,</span><br><span class="line">    <span class="number">0x74</span>, <span class="number">0xE8</span>, <span class="number">0xCB</span>, <span class="number">0x8D</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x10</span>, <span class="number">0x20</span>,</span><br><span class="line">    <span class="number">0x40</span>, <span class="number">0x80</span>, <span class="number">0x1B</span>, <span class="number">0x36</span>, <span class="number">0x6C</span>, <span class="number">0xD8</span>, <span class="number">0xAB</span>, <span class="number">0x4D</span>, <span class="number">0x9A</span>, <span class="number">0x2F</span>,</span><br><span class="line">    <span class="number">0x5E</span>, <span class="number">0xBC</span>, <span class="number">0x63</span>, <span class="number">0xC6</span>, <span class="number">0x97</span>, <span class="number">0x35</span>, <span class="number">0x6A</span>, <span class="number">0xD4</span>, <span class="number">0xB3</span>, <span class="number">0x7D</span>,</span><br><span class="line">    <span class="number">0xFA</span>, <span class="number">0xEF</span>, <span class="number">0xC5</span>, <span class="number">0x91</span>, <span class="number">0x39</span>, <span class="number">0x72</span>, <span class="number">0xE4</span>, <span class="number">0xD3</span>, <span class="number">0xBD</span>, <span class="number">0x61</span>,</span><br><span class="line">    <span class="number">0xC2</span>, <span class="number">0x9F</span>, <span class="number">0x25</span>, <span class="number">0x4A</span>, <span class="number">0x94</span>, <span class="number">0x33</span>, <span class="number">0x66</span>, <span class="number">0xCC</span>, <span class="number">0x83</span>, <span class="number">0x1D</span>,</span><br><span class="line">    <span class="number">0x3A</span>, <span class="number">0x74</span>, <span class="number">0xE8</span>, <span class="number">0xCB</span>, <span class="number">0x8D</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x10</span>,</span><br><span class="line">    <span class="number">0x20</span>, <span class="number">0x40</span>, <span class="number">0x80</span>, <span class="number">0x1B</span>, <span class="number">0x36</span>, <span class="number">0x6C</span>, <span class="number">0xD8</span>, <span class="number">0xAB</span>, <span class="number">0x4D</span>, <span class="number">0x9A</span>,</span><br><span class="line">    <span class="number">0x2F</span>, <span class="number">0x5E</span>, <span class="number">0xBC</span>, <span class="number">0x63</span>, <span class="number">0xC6</span>, <span class="number">0x97</span>, <span class="number">0x35</span>, <span class="number">0x6A</span>, <span class="number">0xD4</span>, <span class="number">0xB3</span>,</span><br><span class="line">    <span class="number">0x7D</span>, <span class="number">0xFA</span>, <span class="number">0xEF</span>, <span class="number">0xC5</span>, <span class="number">0x91</span>, <span class="number">0x39</span>, <span class="number">0x72</span>, <span class="number">0xE4</span>, <span class="number">0xD3</span>, <span class="number">0xBD</span>,</span><br><span class="line">    <span class="number">0x61</span>, <span class="number">0xC2</span>, <span class="number">0x9F</span>, <span class="number">0x25</span>, <span class="number">0x4A</span>, <span class="number">0x94</span>, <span class="number">0x33</span>, <span class="number">0x66</span>, <span class="number">0xCC</span>, <span class="number">0x83</span>,</span><br><span class="line">    <span class="number">0x1D</span>, <span class="number">0x3A</span>, <span class="number">0x74</span>, <span class="number">0xE8</span>, <span class="number">0xCB</span></span><br><span class="line">        &#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> s_box[<span class="number">256</span>] =</span><br><span class="line">        &#123;</span><br><span class="line">    <span class="number">0x63</span>, <span class="number">0x7C</span>, <span class="number">0x77</span>, <span class="number">0x7B</span>, <span class="number">0xF2</span>, <span class="number">0x6B</span>, <span class="number">0x6F</span>, <span class="number">0xC5</span>, <span class="number">0x30</span>, <span class="number">0x01</span>, <span class="number">0x67</span>, <span class="number">0x2B</span>, <span class="number">0xFE</span>, <span class="number">0xD7</span>, <span class="number">0xAB</span>, <span class="number">0x76</span>,</span><br><span class="line">    <span class="number">0xCA</span>, <span class="number">0x82</span>, <span class="number">0xC9</span>, <span class="number">0x7D</span>, <span class="number">0xFA</span>, <span class="number">0x59</span>, <span class="number">0x47</span>, <span class="number">0xF0</span>, <span class="number">0xAD</span>, <span class="number">0xD4</span>, <span class="number">0xA2</span>, <span class="number">0xAF</span>, <span class="number">0x9C</span>, <span class="number">0xA4</span>, <span class="number">0x72</span>, <span class="number">0xC0</span>,</span><br><span class="line">    <span class="number">0xB7</span>, <span class="number">0xFD</span>, <span class="number">0x93</span>, <span class="number">0x26</span>, <span class="number">0x36</span>, <span class="number">0x3F</span>, <span class="number">0xF7</span>, <span class="number">0xCC</span>, <span class="number">0x34</span>, <span class="number">0xA5</span>, <span class="number">0xE5</span>, <span class="number">0xF1</span>, <span class="number">0x71</span>, <span class="number">0xD8</span>, <span class="number">0x31</span>, <span class="number">0x15</span>,</span><br><span class="line">    <span class="number">0x04</span>, <span class="number">0xC7</span>, <span class="number">0x23</span>, <span class="number">0xC3</span>, <span class="number">0x18</span>, <span class="number">0x96</span>, <span class="number">0x05</span>, <span class="number">0x9A</span>, <span class="number">0x07</span>, <span class="number">0x12</span>, <span class="number">0x80</span>, <span class="number">0xE2</span>, <span class="number">0xEB</span>, <span class="number">0x27</span>, <span class="number">0xB2</span>, <span class="number">0x75</span>,</span><br><span class="line">    <span class="number">0x09</span>, <span class="number">0x83</span>, <span class="number">0x2C</span>, <span class="number">0x1A</span>, <span class="number">0x1B</span>, <span class="number">0x6E</span>, <span class="number">0x5A</span>, <span class="number">0xA0</span>, <span class="number">0x52</span>, <span class="number">0x3B</span>, <span class="number">0xD6</span>, <span class="number">0xB3</span>, <span class="number">0x29</span>, <span class="number">0xE3</span>, <span class="number">0x2F</span>, <span class="number">0x84</span>,</span><br><span class="line">    <span class="number">0x53</span>, <span class="number">0xD1</span>, <span class="number">0x00</span>, <span class="number">0xED</span>, <span class="number">0x20</span>, <span class="number">0xFC</span>, <span class="number">0xB1</span>, <span class="number">0x5B</span>, <span class="number">0x6A</span>, <span class="number">0xCB</span>, <span class="number">0xBE</span>, <span class="number">0x39</span>, <span class="number">0x4A</span>, <span class="number">0x4C</span>, <span class="number">0x58</span>, <span class="number">0xCF</span>,</span><br><span class="line">    <span class="number">0xD0</span>, <span class="number">0xEF</span>, <span class="number">0xAA</span>, <span class="number">0xFB</span>, <span class="number">0x43</span>, <span class="number">0x4D</span>, <span class="number">0x33</span>, <span class="number">0x85</span>, <span class="number">0x45</span>, <span class="number">0xF9</span>, <span class="number">0x02</span>, <span class="number">0x7F</span>, <span class="number">0x50</span>, <span class="number">0x3C</span>, <span class="number">0x9F</span>, <span class="number">0xA8</span>,</span><br><span class="line">    <span class="number">0x51</span>, <span class="number">0xA3</span>, <span class="number">0x40</span>, <span class="number">0x8F</span>, <span class="number">0x92</span>, <span class="number">0x9D</span>, <span class="number">0x38</span>, <span class="number">0xF5</span>, <span class="number">0xBC</span>, <span class="number">0xB6</span>, <span class="number">0xDA</span>, <span class="number">0x21</span>, <span class="number">0x10</span>, <span class="number">0xFF</span>, <span class="number">0xF3</span>, <span class="number">0xD2</span>,</span><br><span class="line">    <span class="number">0xCD</span>, <span class="number">0x0C</span>, <span class="number">0x13</span>, <span class="number">0xEC</span>, <span class="number">0x5F</span>, <span class="number">0x97</span>, <span class="number">0x44</span>, <span class="number">0x17</span>, <span class="number">0xC4</span>, <span class="number">0xA7</span>, <span class="number">0x7E</span>, <span class="number">0x3D</span>, <span class="number">0x64</span>, <span class="number">0x5D</span>, <span class="number">0x19</span>, <span class="number">0x73</span>,</span><br><span class="line">    <span class="number">0x60</span>, <span class="number">0x81</span>, <span class="number">0x4F</span>, <span class="number">0xDC</span>, <span class="number">0x22</span>, <span class="number">0x2A</span>, <span class="number">0x90</span>, <span class="number">0x88</span>, <span class="number">0x46</span>, <span class="number">0xEE</span>, <span class="number">0xB8</span>, <span class="number">0x14</span>, <span class="number">0xDE</span>, <span class="number">0x5E</span>, <span class="number">0x0B</span>, <span class="number">0xDB</span>,</span><br><span class="line">    <span class="number">0xE0</span>, <span class="number">0x32</span>, <span class="number">0x3A</span>, <span class="number">0x0A</span>, <span class="number">0x49</span>, <span class="number">0x06</span>, <span class="number">0x24</span>, <span class="number">0x5C</span>, <span class="number">0xC2</span>, <span class="number">0xD3</span>, <span class="number">0xAC</span>, <span class="number">0x62</span>, <span class="number">0x91</span>, <span class="number">0x95</span>, <span class="number">0xE4</span>, <span class="number">0x79</span>,</span><br><span class="line">    <span class="number">0xE7</span>, <span class="number">0xC8</span>, <span class="number">0x37</span>, <span class="number">0x6D</span>, <span class="number">0x8D</span>, <span class="number">0xD5</span>, <span class="number">0x4E</span>, <span class="number">0xA9</span>, <span class="number">0x6C</span>, <span class="number">0x56</span>, <span class="number">0xF4</span>, <span class="number">0xEA</span>, <span class="number">0x65</span>, <span class="number">0x7A</span>, <span class="number">0xAE</span>, <span class="number">0x08</span>,</span><br><span class="line">    <span class="number">0xBA</span>, <span class="number">0x78</span>, <span class="number">0x25</span>, <span class="number">0x2E</span>, <span class="number">0x1C</span>, <span class="number">0xA6</span>, <span class="number">0xB4</span>, <span class="number">0xC6</span>, <span class="number">0xE8</span>, <span class="number">0xDD</span>, <span class="number">0x74</span>, <span class="number">0x1F</span>, <span class="number">0x4B</span>, <span class="number">0xBD</span>, <span class="number">0x8B</span>, <span class="number">0x8A</span>,</span><br><span class="line">    <span class="number">0x70</span>, <span class="number">0x3E</span>, <span class="number">0xB5</span>, <span class="number">0x66</span>, <span class="number">0x48</span>, <span class="number">0x03</span>, <span class="number">0xF6</span>, <span class="number">0x0E</span>, <span class="number">0x61</span>, <span class="number">0x35</span>, <span class="number">0x57</span>, <span class="number">0xB9</span>, <span class="number">0x86</span>, <span class="number">0xC1</span>, <span class="number">0x1D</span>, <span class="number">0x9E</span>,</span><br><span class="line">    <span class="number">0xE1</span>, <span class="number">0xF8</span>, <span class="number">0x98</span>, <span class="number">0x11</span>, <span class="number">0x69</span>, <span class="number">0xD9</span>, <span class="number">0x8E</span>, <span class="number">0x94</span>, <span class="number">0x9B</span>, <span class="number">0x1E</span>, <span class="number">0x87</span>, <span class="number">0xE9</span>, <span class="number">0xCE</span>, <span class="number">0x55</span>, <span class="number">0x28</span>, <span class="number">0xDF</span>,</span><br><span class="line">    <span class="number">0x8C</span>, <span class="number">0xA1</span>, <span class="number">0x89</span>, <span class="number">0x0D</span>, <span class="number">0xBF</span>, <span class="number">0xE6</span>, <span class="number">0x42</span>, <span class="number">0x68</span>, <span class="number">0x41</span>, <span class="number">0x99</span>, <span class="number">0x2D</span>, <span class="number">0x0F</span>, <span class="number">0xB0</span>, <span class="number">0x54</span>, <span class="number">0xBB</span>, <span class="number">0x16</span>,</span><br><span class="line">        &#125;;</span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">char</span> <span class="title">sub_8120</span><span class="params">(<span class="keyword">unsigned</span> __int8 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s_box[a1];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sub_7E84</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> __int8 v1; <span class="comment">// [sp+4h] [bp-1Ch]</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> j; <span class="comment">// [sp+8h] [bp-18h]</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> i; <span class="comment">// [sp+Ch] [bp-14h]</span></span><br><span class="line">    <span class="keyword">unsigned</span> __int8 v4[<span class="number">4</span>]; <span class="comment">// [sp+10h] [bp-10h]</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">3</span>; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">        key_table[<span class="number">4</span> * i] = *(<span class="keyword">unsigned</span> <span class="keyword">char</span> *)(key + <span class="number">4</span> * i);</span><br><span class="line">        key_table[<span class="number">4</span> * i + <span class="number">1</span>] = *(<span class="keyword">unsigned</span> <span class="keyword">char</span> *)(key + <span class="number">4</span> * i + <span class="number">1</span>);</span><br><span class="line">        key_table[<span class="number">4</span> * i + <span class="number">2</span>] = *(<span class="keyword">unsigned</span> <span class="keyword">char</span> *)(key + <span class="number">4</span> * i + <span class="number">2</span>);</span><br><span class="line">        key_table[<span class="number">4</span> * i + <span class="number">3</span>] = *(<span class="keyword">unsigned</span> <span class="keyword">char</span> *)(key + <span class="number">4</span> * i + <span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( i &lt;= <span class="number">0x2B</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt;= <span class="number">3</span>; ++j )</span><br><span class="line">            *(&amp;v4[<span class="number">0</span>] + j) = key_table[<span class="number">4</span> * i - <span class="number">4</span> + j];</span><br><span class="line">        <span class="keyword">if</span> ( !((<span class="keyword">unsigned</span> __int8)i &lt;&lt; <span class="number">30</span>) )</span><br><span class="line">        &#123;</span><br><span class="line">            v1 = v4[<span class="number">0</span>];</span><br><span class="line">            v4[<span class="number">0</span>] = v4[<span class="number">1</span>];</span><br><span class="line">            v4[<span class="number">1</span>] = v4[<span class="number">2</span>];</span><br><span class="line">            v4[<span class="number">2</span>] = v4[<span class="number">3</span>];</span><br><span class="line">            v4[<span class="number">3</span>] = v1;</span><br><span class="line">            v4[<span class="number">0</span>] = <span class="built_in">sub_8120</span>(v4[<span class="number">0</span>]);</span><br><span class="line">            v4[<span class="number">1</span>] = <span class="built_in">sub_8120</span>(v4[<span class="number">1</span>]);</span><br><span class="line">            v4[<span class="number">2</span>] = <span class="built_in">sub_8120</span>(v4[<span class="number">2</span>]);</span><br><span class="line">            v4[<span class="number">3</span>] = <span class="built_in">sub_8120</span>(v4[<span class="number">3</span>]);</span><br><span class="line">            v4[<span class="number">0</span>] ^= byte_18CEC[i &gt;&gt; <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        key_table[<span class="number">4</span> * i]     = key_table[<span class="number">4</span> * i - <span class="number">16</span>] ^ v4[<span class="number">0</span>];</span><br><span class="line">        key_table[<span class="number">4</span> * i + <span class="number">1</span>] = key_table[<span class="number">4</span> * i - <span class="number">15</span>] ^ v4[<span class="number">1</span>];</span><br><span class="line">        key_table[<span class="number">4</span> * i + <span class="number">2</span>] = key_table[<span class="number">4</span> * i - <span class="number">14</span>] ^ v4[<span class="number">2</span>];</span><br><span class="line">        key_table[<span class="number">4</span> * i + <span class="number">3</span>] = key_table[<span class="number">4</span> * i - <span class="number">13</span>] ^ v4[<span class="number">3</span>];</span><br><span class="line">        ++i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//native算法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">xor_block</span><span class="params">(<span class="keyword">int</span> idx, <span class="keyword">unsigned</span> <span class="keyword">char</span> buf[BLOCK_SIZE])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; BLOCK_SIZE; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        buf[i] ^= key_table[idx * BLOCK_SIZE + i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transform</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> buf[BLOCK_SIZE])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; BLOCK_SIZE; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        buf[i] = s_box[buf[i]];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">untransform</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> buf[BLOCK_SIZE])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; BLOCK_SIZE; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">bool</span> found = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">size_t</span> j = <span class="number">0</span>; j &lt; <span class="number">256</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (s_box[j] == buf[i])</span><br><span class="line">            &#123;</span><br><span class="line">                buf[i] = (<span class="keyword">unsigned</span> <span class="keyword">char</span>)j;</span><br><span class="line">                found = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">assert</span>(found);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">xchange_byte</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> buf[BLOCK_SIZE])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> c = buf[<span class="number">1</span>];</span><br><span class="line">    buf[<span class="number">1</span>] = buf[<span class="number">5</span>];</span><br><span class="line">    buf[<span class="number">5</span>] = buf[<span class="number">9</span>];</span><br><span class="line">    buf[<span class="number">9</span>] = buf[<span class="number">0xd</span>];</span><br><span class="line">    buf[<span class="number">0xd</span>] = c;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">swap</span>(buf[<span class="number">2</span>], buf[<span class="number">0xa</span>]);</span><br><span class="line">    <span class="built_in">swap</span>(buf[<span class="number">6</span>], buf[<span class="number">0xe</span>]);</span><br><span class="line"></span><br><span class="line">    c = buf[<span class="number">3</span>];</span><br><span class="line">    buf[<span class="number">3</span>] = buf[<span class="number">0xf</span>];</span><br><span class="line">    buf[<span class="number">0xf</span>] = buf[<span class="number">0xb</span>];</span><br><span class="line">    buf[<span class="number">0xb</span>] = buf[<span class="number">7</span>];</span><br><span class="line">    buf[<span class="number">7</span>] = c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unxchange_byte</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> buf[BLOCK_SIZE])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> c = buf[<span class="number">1</span>];</span><br><span class="line">    buf[<span class="number">1</span>] = buf[<span class="number">0xd</span>];</span><br><span class="line">    buf[<span class="number">0xd</span>] = buf[<span class="number">9</span>];</span><br><span class="line">    buf[<span class="number">9</span>] = buf[<span class="number">5</span>];</span><br><span class="line">    buf[<span class="number">5</span>] = c;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">swap</span>(buf[<span class="number">2</span>], buf[<span class="number">0xa</span>]);</span><br><span class="line">    <span class="built_in">swap</span>(buf[<span class="number">6</span>], buf[<span class="number">0xe</span>]);</span><br><span class="line"></span><br><span class="line">    c = buf[<span class="number">3</span>];</span><br><span class="line">    buf[<span class="number">3</span>] = buf[<span class="number">7</span>];</span><br><span class="line">    buf[<span class="number">7</span>] = buf[<span class="number">0xb</span>];</span><br><span class="line">    buf[<span class="number">0xb</span>] = buf[<span class="number">0xf</span>];</span><br><span class="line">    buf[<span class="number">0xf</span>] = c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">xor_scroll</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> buf[BLOCK_SIZE])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> buf_ = buf + i * <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">auto</span> o = buf_[<span class="number">0</span>];  <span class="comment">//save</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">auto</span> x = buf_[<span class="number">0</span>] ^ buf_[<span class="number">1</span>] ^ buf_[<span class="number">2</span>] ^ buf_[<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">auto</span> c = buf_[<span class="number">0</span>] ^ buf_[<span class="number">1</span>];</span><br><span class="line">        c = ((c &gt;&gt; <span class="number">7</span>) * <span class="number">0x1b</span>) ^ (c &lt;&lt; <span class="number">1</span>);</span><br><span class="line">        c ^= x;</span><br><span class="line">        buf_[<span class="number">0</span>] ^= c;</span><br><span class="line"></span><br><span class="line">        c = buf_[<span class="number">1</span>] ^ buf_[<span class="number">2</span>];</span><br><span class="line">        c = ((c &gt;&gt; <span class="number">7</span>) * <span class="number">0x1b</span>) ^ (c &lt;&lt; <span class="number">1</span>);</span><br><span class="line">        c ^= x;</span><br><span class="line">        buf_[<span class="number">1</span>] ^= c;</span><br><span class="line"></span><br><span class="line">        c = buf_[<span class="number">2</span>] ^ buf_[<span class="number">3</span>];</span><br><span class="line">        c = ((c &gt;&gt; <span class="number">7</span>) * <span class="number">0x1b</span>) ^ (c &lt;&lt; <span class="number">1</span>);</span><br><span class="line">        c ^= x;</span><br><span class="line">        buf_[<span class="number">2</span>] ^= c;</span><br><span class="line"></span><br><span class="line">        c = buf_[<span class="number">3</span>] ^ o;</span><br><span class="line">        c = ((c &gt;&gt; <span class="number">7</span>) * <span class="number">0x1b</span>) ^ (c &lt;&lt; <span class="number">1</span>);</span><br><span class="line">        c ^= x;</span><br><span class="line">        buf_[<span class="number">3</span>] ^= c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unxor_scroll</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> buf[BLOCK_SIZE])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> buf_ = buf + i * <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">size_t</span> m = <span class="number">0</span>; m &lt; <span class="number">3</span>; m++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">auto</span> o = buf_[<span class="number">0</span>];  <span class="comment">//save</span></span><br><span class="line">            <span class="keyword">auto</span> x = buf_[<span class="number">0</span>] ^ buf_[<span class="number">1</span>] ^ buf_[<span class="number">2</span>] ^ buf_[<span class="number">3</span>];</span><br><span class="line">            <span class="keyword">auto</span> c = buf_[<span class="number">0</span>] ^ buf_[<span class="number">1</span>];</span><br><span class="line">            c = ((c &gt;&gt; <span class="number">7</span>) * <span class="number">0x1b</span>) ^ (c &lt;&lt; <span class="number">1</span>);</span><br><span class="line">            c ^= x;</span><br><span class="line">            buf_[<span class="number">0</span>] ^= c;</span><br><span class="line"></span><br><span class="line">            c = buf_[<span class="number">1</span>] ^ buf_[<span class="number">2</span>];</span><br><span class="line">            c = ((c &gt;&gt; <span class="number">7</span>) * <span class="number">0x1b</span>) ^ (c &lt;&lt; <span class="number">1</span>);</span><br><span class="line">            c ^= x;</span><br><span class="line">            buf_[<span class="number">1</span>] ^= c;</span><br><span class="line"></span><br><span class="line">            c = buf_[<span class="number">2</span>] ^ buf_[<span class="number">3</span>];</span><br><span class="line">            c = ((c &gt;&gt; <span class="number">7</span>) * <span class="number">0x1b</span>) ^ (c &lt;&lt; <span class="number">1</span>);</span><br><span class="line">            c ^= x;</span><br><span class="line">            buf_[<span class="number">2</span>] ^= c;</span><br><span class="line"></span><br><span class="line">            c = buf_[<span class="number">3</span>] ^ o;</span><br><span class="line">            c = ((c &gt;&gt; <span class="number">7</span>) * <span class="number">0x1b</span>) ^ (c &lt;&lt; <span class="number">1</span>);</span><br><span class="line">            c ^= x;</span><br><span class="line">            buf_[<span class="number">3</span>] ^= c;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">encode</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> buf[BLOCK_SIZE])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">xor_block</span>(<span class="number">0</span>, buf);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">transform</span>(buf);</span><br><span class="line">        <span class="built_in">xchange_byte</span>(buf);</span><br><span class="line">        <span class="built_in">xor_scroll</span>(buf);</span><br><span class="line">        <span class="built_in">xor_block</span>(i, buf);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">transform</span>(buf);</span><br><span class="line">    <span class="built_in">xchange_byte</span>(buf);</span><br><span class="line">    <span class="built_in">xor_block</span>(<span class="number">10</span>, buf);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">decode</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> buf[BLOCK_SIZE])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">xor_block</span>(<span class="number">10</span>, buf);</span><br><span class="line">    <span class="built_in">unxchange_byte</span>(buf);</span><br><span class="line">    <span class="built_in">untransform</span>(buf);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">9</span>; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">xor_block</span>(i, buf);</span><br><span class="line">        <span class="built_in">unxor_scroll</span>(buf);</span><br><span class="line">        <span class="built_in">unxchange_byte</span>(buf);</span><br><span class="line">        <span class="built_in">untransform</span>(buf);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">xor_block</span>(<span class="number">0</span>, buf);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ttea</span><span class="params">(<span class="keyword">int</span> *seri,<span class="keyword">int</span> * key,<span class="keyword">int</span> tmp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i ++)</span><br><span class="line">        sum += tmp;</span><br><span class="line">    <span class="keyword">int</span> y = seri[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span> z = seri[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> a = key[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span> b = key[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> c = key[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">int</span> d = key[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        z -= (((y &lt;&lt; <span class="number">4</span>) + c) ^ (y + sum)) ^ ((y &gt;&gt; <span class="number">5</span>) + d);</span><br><span class="line">        y -= (((z &lt;&lt; <span class="number">4</span>) + a) ^ (z + sum)) ^ ((z &gt;&gt; <span class="number">5</span>) + b);</span><br><span class="line">        sum -= <span class="number">305419896</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    seri[<span class="number">0</span>] = y;</span><br><span class="line">    seri[<span class="number">1</span>] = z;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">sub_7E84</span>();</span><br><span class="line">    <span class="keyword">char</span> seri[] = &#123;<span class="number">9</span>,<span class="number">125</span>,<span class="number">-73</span>,<span class="number">27</span>,<span class="number">-62</span>,<span class="number">40</span>,<span class="number">100</span>,<span class="number">-6</span>,<span class="number">121</span>,<span class="number">-31</span>,<span class="number">-126</span>,<span class="number">25</span>,<span class="number">13</span>,<span class="number">-89</span>,<span class="number">-80</span>,<span class="number">57</span>&#125;;  </span><br><span class="line">    <span class="built_in">decode</span>((<span class="keyword">unsigned</span> <span class="keyword">char</span> *)seri);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d, &quot;</span>,seri[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>分析到这本来以为可以美滋滋的去拿flag了，但是结果总是解不对，只好又回来看看cccc函数，发现在aes后面还有一大段代码，初测猜测是改了算法的key或者cmp。</p>
<p><img src="http://inews.gtimg.com/newsapp_ls/0/13618498578/0" alt="image-20210606014401681"></p>
<p>果然通过so层把java层的代码给修改了，这里有两处都可以改动这个参数，由于没有动调不知道到底走那个，便怀着都试试的想法开始解密，结果却都是不正确。再回来看看，发现dword_4051C+0x16D496这一个偏移值修改了一个东西至于是什么就不知道了，当时卡在这里卡了好久，最开始的想法是用frida调用一下，然后开始去frida的反调试，很简单只要把exit函数ret就行。</p>
<p><img src="http://inews.gtimg.com/newsapp_ls/0/13618498587/0" alt="image-20210606014915874"></p>
<p><img src="http://inews.gtimg.com/newsapp_ls/0/13618498589/0" alt="image-20210606015125239"></p>
<p>结果搞了好久还是没有成功弄出来，不知道问题在哪，以后在仔细研究研究frida。</p>
<p>后来听到有的师傅说这个题和去年的kctf安卓题一样的设计思路，便跑去研究那个题，题还是很友好，可以调试i起来，发现dword_4051C就是dex的基址，所加的偏移恰好是tea的key和魔术。看来是第二次tea的参数变了。</p>
<p><img src="http://inews.gtimg.com/newsapp_ls/0/13618498595/0" alt="image-20210606020111014"></p>
<p><img src="http://inews.gtimg.com/newsapp_ls/0/13618498607/0" alt="image-20210606015639948"></p>
<p><img src="http://inews.gtimg.com/newsapp_ls/0/13618498618/0" alt="image-20210606015748265"></p>
<p><img src="http://inews.gtimg.com/newsapp_ls/0/13618498624/0" alt="image-20210606015924561"></p>
<p>总结一下总体流程：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//cmp = IgMDcaHeDcHTRr1SUS7urw==</span><br><span class="line">//key1 = &quot;youaresoclever!!&quot;</span><br><span class="line">//tmp1 = 0x12345678</span><br><span class="line">//key2 = &quot;zipMatcher&quot;</span><br><span class="line">//tmp2 = 0x515374A1</span><br><span class="line">//aes_ecb_key = wonderfulday!!!!</span><br></pre></td></tr></table></figure>

<h3 id="三、解题"><a href="#三、解题" class="headerlink" title="三、解题"></a>三、解题</h3><p>tea脚本：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.BadPaddingException;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.Cipher;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.IllegalBlockSizeException;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.KeyGenerator;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.NoSuchPaddingException;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.SecretKey;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class="line"><span class="keyword">import</span> java.security.SecureRandom;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OOXX</span> </span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> String key = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] ooxx(<span class="keyword">byte</span>[] content, <span class="keyword">int</span> offset, <span class="keyword">int</span>[] ooxxooxxoo) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] tempInt = byteToInt(content, offset);</span><br><span class="line">        <span class="keyword">int</span> y = tempInt[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> z = tempInt[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i ++)</span><br><span class="line">        	sum += tmp;</span><br><span class="line">        <span class="keyword">int</span> a = ooxxooxxoo[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> b = ooxxooxxoo[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> c = ooxxooxxoo[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">int</span> d = ooxxooxxoo[<span class="number">3</span>];</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">            z -= (((y &lt;&lt; <span class="number">4</span>) + c) ^ (y + sum)) ^ ((y &gt;&gt; <span class="number">5</span>) + d);</span><br><span class="line">            y -= (((z &lt;&lt; <span class="number">4</span>) + a) ^ (z + sum)) ^ ((z &gt;&gt; <span class="number">5</span>) + b);</span><br><span class="line">            sum -= tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        tempInt[<span class="number">0</span>] = y;</span><br><span class="line">        tempInt[<span class="number">1</span>] = z;</span><br><span class="line">        <span class="keyword">return</span> intToByte(tempInt, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] byteToInt(<span class="keyword">byte</span>[] content, <span class="keyword">int</span> offset) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[(content.length &gt;&gt; <span class="number">2</span>)];</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = offset; j &lt; content.length; j += <span class="number">4</span>) &#123;</span><br><span class="line">            result[i] = transform(content[j + <span class="number">3</span>]) | (transform(content[j + <span class="number">2</span>]) &lt;&lt; <span class="number">8</span>) | (transform(content[j + <span class="number">1</span>]) &lt;&lt; <span class="number">16</span>) | (content[j] &lt;&lt; <span class="number">24</span>);</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] intToByte(<span class="keyword">int</span>[] content, <span class="keyword">int</span> offset) &#123;</span><br><span class="line">        <span class="keyword">byte</span>[] result = <span class="keyword">new</span> <span class="keyword">byte</span>[(content.length &lt;&lt; <span class="number">2</span>)];</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = offset; j &lt; result.length; j += <span class="number">4</span>) &#123;</span><br><span class="line">            result[j + <span class="number">3</span>] = (<span class="keyword">byte</span>) (content[i] &amp; <span class="number">255</span>);</span><br><span class="line">            result[j + <span class="number">2</span>] = (<span class="keyword">byte</span>) ((content[i] &gt;&gt; <span class="number">8</span>) &amp; <span class="number">255</span>);</span><br><span class="line">            result[j + <span class="number">1</span>] = (<span class="keyword">byte</span>) ((content[i] &gt;&gt; <span class="number">16</span>) &amp; <span class="number">255</span>);</span><br><span class="line">            result[j] = (<span class="keyword">byte</span>) ((content[i] &gt;&gt; <span class="number">24</span>) &amp; <span class="number">255</span>);</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">transform</span><span class="params">(<span class="keyword">byte</span> temp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (temp &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> temp + <span class="number">256</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] ooxxoo(<span class="keyword">byte</span>[] info) &#123;</span><br><span class="line">        String ooxxooxxoo = key;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">16</span>; j++) &#123;</span><br><span class="line">            ooxxooxxoo = ooxxooxxoo + <span class="string">&quot;!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">byte</span>[] ooxxooxxooarray = ooxxooxxoo.getBytes();</span><br><span class="line">        <span class="keyword">int</span>[] ooxxooxxooxx = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">16</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++) &#123;</span><br><span class="line">            ooxxooxxooxx[i] = ooxxooxxooarray[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (info.length % <span class="number">8</span> != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">byte</span>[] result = <span class="keyword">new</span> <span class="keyword">byte</span>[info.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> offset = <span class="number">0</span>; offset &lt; result.length; offset += <span class="number">8</span>) &#123;</span><br><span class="line">            System.arraycopy(ooxx(info, offset, ooxxooxxooxx), <span class="number">0</span>, result, offset, <span class="number">8</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//cmp = IgMDcaHeDcHTRr1SUS7urw==</span></span><br><span class="line">        <span class="comment">//key1 = &quot;youaresoclever!!&quot;</span></span><br><span class="line">        <span class="comment">//tmp1 = 0x12345678</span></span><br><span class="line">        <span class="comment">//key2 = &quot;zipMatcher&quot;</span></span><br><span class="line">        <span class="comment">//tmp2 = 0x515374A1</span></span><br><span class="line">        <span class="comment">//aes_ecb_key = wonderfulday!!!!</span></span><br><span class="line">        String crypt = <span class="string">&quot;IgMDcaHeDcHTRr1SUS7urw==&quot;</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] content = Base64.getDecoder().decode(crypt);</span><br><span class="line">        key = <span class="string">&quot;zipMatcher&quot;</span>;</span><br><span class="line">        tmp = <span class="number">0x515374A1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] result = ooxxoo(content);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i ++)</span><br><span class="line">            System.out.print((<span class="keyword">int</span>)result[i] + <span class="string">&quot;,&quot;</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">//aes()</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] dofinal = <span class="keyword">new</span> <span class="keyword">byte</span>[] &#123;</span><br><span class="line">        	-<span class="number">84</span>, -<span class="number">67</span>, -<span class="number">53</span>, <span class="number">91</span>, -<span class="number">71</span>, -<span class="number">37</span>, <span class="number">60</span>, -<span class="number">39</span>, -<span class="number">97</span>, -<span class="number">66</span>, <span class="number">31</span>, <span class="number">122</span>, -<span class="number">125</span>, <span class="number">48</span>, <span class="number">31</span>, -<span class="number">126</span></span><br><span class="line">        &#125;;</span><br><span class="line">        key = <span class="string">&quot;youaresoclever!!&quot;</span>;</span><br><span class="line">        tmp = <span class="number">0x12345678</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] flag = ooxxoo(dofinal);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(flag));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="四、get-flag"><a href="#四、get-flag" class="headerlink" title="四、get flag"></a>四、get flag</h3><p><img src="http://inews.gtimg.com/newsapp_ls/0/13618498630/0" alt="image-20210606020622758"></p>
]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>安卓逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>2021国赛线下</title>
    <url>/2021/07/01/wp/</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="ctf-2-unprotect-apk"><a href="#ctf-2-unprotect-apk" class="headerlink" title="ctf-2.unprotect.apk"></a>ctf-2.unprotect.apk</h1><p>简单题，并没有做什么防护，裸apk，只要调试起来就弄出flag</p>
<p><img src="http://inews.gtimg.com/newsapp_ls/0/13715758920/0" alt="image-20210630150011843"></p>
<p>直接定位到check的地方，发现是由三组数据在check，其中v48是根据参数‘’aaaa‘’生成的，v63是常数组，最后v66是根据我们的输入生成的，从前面很容易分析出来，我们的输入是64位，每四个生成一位最后共生成16个数据放到v66+100的地方。check表达式是tmp +=（v48[i] ^ v66[i+100]）+ v63[i] == 1740，开始我以为是要根据限制去爆破v66,后来发现v63的前16位之和恰好等于1740，因此表达式最后就是v66与v48进行比较。</p>
<p>dump出v48的数据，然后根据前面input的生成算法逆向回去就能拿到flag，脚本给出</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">v48 = [</span><br><span class="line">  <span class="number">0x4C</span>, <span class="number">0x02</span>, <span class="number">0x99</span>, <span class="number">0x34</span>, <span class="number">0xEB</span>, <span class="number">0xC0</span>, <span class="number">0x3F</span>, <span class="number">0xCB</span>, <span class="number">0x41</span>, <span class="number">0xB4</span>, </span><br><span class="line">  <span class="number">0x6C</span>, <span class="number">0x37</span>, <span class="number">0x3F</span>, <span class="number">0xF5</span>, <span class="number">0x02</span>, <span class="number">0x86</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">code = <span class="string">&quot;0123456789ABCDEF&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printf</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">hex</span>(<span class="built_in">ord</span>(code[n]))[-<span class="number">2</span>:],end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> v48:</span><br><span class="line">    printf(x &gt;&gt; <span class="number">4</span>)</span><br><span class="line">    printf(x &amp; <span class="number">0xf</span>)</span><br><span class="line"><span class="comment">#flag&#123;3443303239393334454243303346434234314234364333373346463530323836&#125;</span></span><br></pre></td></tr></table></figure>

<p><img src="http://inews.gtimg.com/newsapp_ls/0/13715758972/0" alt="screen"></p>
<h1 id="CrakeMe-exe"><a href="#CrakeMe-exe" class="headerlink" title="CrakeMe.exe"></a>CrakeMe.exe</h1><p>这也是一个简单题，唯一的难点在有点混淆和main开始有点反调试。都很容易绕过。</p>
<p><img src="http://inews.gtimg.com/newsapp_ls/0/13715759033/0" alt="image-20210630151140577"></p>
<p>首先判断输入要小于16位。</p>
<p><img src="http://inews.gtimg.com/newsapp_ls/0/13715759072/0" alt="image-20210630151215444"></p>
<p>判断前五位为“flag{”和第十一位“_”以及最后一位“}”</p>
<p><img src="http://inews.gtimg.com/newsapp_ls/0/13715759114/0" alt="image-20210630151316170"></p>
<p>这里是判断倒数的四到二位。根据base表很容易就确定为base64，验证正确。得到为“CTF”</p>
<p><img src="http://inews.gtimg.com/newsapp_ls/0/13715759173/0" alt="image-20210630151427627"></p>
<p>这里就是判断“_”前面部分，根据sub_591170函数生成，我们不用知道该函数做了什么，只要dump出结果就行。</p>
<p>最后flag：flag{HIUKF_CTF}</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>安卓调试</tag>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>Android系统的ART虚拟机</title>
    <url>/2021/07/08/Android%E7%B3%BB%E7%BB%9F%E7%9A%84ART%E8%99%9A%E6%8B%9F%E6%9C%BA/</url>
    <content><![CDATA[<h1 id="ART-VS-Dalvik"><a href="#ART-VS-Dalvik" class="headerlink" title="ART VS Dalvik"></a>ART VS Dalvik</h1><p><strong>Dalvik</strong>被取代的主要原因分析：</p>
<ul>
<li>  Dalvik是为32位设计，不再适用64位CPU。</li>
<li>  单纯的字节码解释加JIT编译的执行方式，性能要弱于本地机器码的执行。</li>
<li>  每一次运行都需要进行解释执行和JIT编译两大工作，浪费资源。</li>
<li>  Dalvik虚拟机的垃圾回收机制不够好，经常导致卡顿。</li>
</ul>
<p><strong>ART</strong>虚拟机的改进:</p>
<ul>
<li><p>  <strong>AOT编译：</strong>Ahead-of-time(AOT)是相当于JIT而言的。JIT是在程序运行时进行字节码到本地机器码的编译。然后再执行机器码。而AOT模式下，是在APK在初次安装的时候，系统会通过一个名称为dex2oat的工具将APK中的dex文件编译成包含本地机器码的oat文件存放下来，在运行APK的时候就是加载oat文件，同时不用加载一个或多个dex文件。相比之下，AOT模式下，不必每次去打开一个或多个dex文件，减少了I/O操作，更重要的是减少了解释字节码这个环节。使APK更加轻量的执行。</p>
</li>
<li><p><strong>垃圾回收机制优化：</strong>GC是虚拟机非常重要的一个特性，因为它的实现好坏直接影响所有在虚拟机上运行的应用。GC实现的不好可能会导致画面跳跃，掉帧，UI相应过慢等问题。</p>
<p>  ART的垃圾回收机制相较于Dalvik虚拟机的改进：</p>
<ol>
<li> 将GC的停顿由两次改为一次。</li>
<li> 在仅有一次的GC停顿中进行并行处理。</li>
<li> 在特殊情况下，对于近期创建的具有较短生命的对象消耗更少的时间进行垃圾回收。</li>
<li> 对于后台进程的内存在垃圾回收过程中进行压缩以解决碎片化的问题。</li>
</ol>
</li>
</ul>
<p><strong>两种虚拟机安装APK的流程</strong></p>
<p><img src="http://inews.gtimg.com/newsapp_ls/0/13731089897/0" alt="ART&amp;Dalvik"></p>
<p>从图中我们可以得到：</p>
<ul>
<li>  在Dalvik虚拟机上，APK解包后的Dex文件在安装时被优化为odex文件，在运行时，会被JIT编译器编译成native代码。</li>
<li>  在ART虚拟机上，Dex文件会直接由dex2oat工具翻译成oat格式的文件，oat文件中既包含了dex文件中原先的内容，也包含了已经编译好的native代码。</li>
</ul>
<h1 id="OAT文件"><a href="#OAT文件" class="headerlink" title="OAT文件"></a>OAT文件</h1><p>oat文件的主要组成结构如下表所示：</p>
<table>
<thead>
<tr>
<th>字段名称</th>
<th>字段说明</th>
</tr>
</thead>
<tbody><tr>
<td>OatHeader</td>
<td>Oat文件头信息</td>
</tr>
<tr>
<td>OatDexFile数组</td>
<td>Dex文件的详细信息</td>
</tr>
<tr>
<td>Dex数组</td>
<td>.dex文件的拷贝</td>
</tr>
<tr>
<td>TyoeLookupTable数组</td>
<td>用来辅助查找dex文件中的类</td>
</tr>
<tr>
<td>ClassOffest数组</td>
<td>OatDexFile中每个类的偏移类</td>
</tr>
<tr>
<td>OatClass数组</td>
<td>每个类的详细信息</td>
</tr>
<tr>
<td>padding</td>
<td>如果需要，通过填充padding来让后面的内容进行页面对齐</td>
</tr>
<tr>
<td>OatMethodHeader</td>
<td>Oat文件中描述方法的头信息</td>
</tr>
<tr>
<td>MethodCode</td>
<td>类的方法代码，OatMethHeader和MethodCode会交替出现多次</td>
</tr>
</tbody></table>
<p>oat文件可以通过oatdump工具来查看具体内容。详细使用通过adb shell连接手机后输入oatdump查看。</p>
<h1 id="boot-oat与boot-art"><a href="#boot-oat与boot-art" class="headerlink" title="boot.oat与boot.art"></a>boot.oat与boot.art</h1><p>由于考虑到几乎所有的APK程序都会使用到Android Framework中提供的基础类，在代码的(.text)段会引用Framework Image和Framework Code中的内容。因此在AOPS编译时，会将所有的这些公共类放到专门的一个Oat文件中，这就是boot.oat与boot.art。</p>
<blockquote>
<p>  /data/dalvik-cache/arm64/system@<a href="mailto:&#x66;&#114;&#97;&#109;&#101;&#119;&#111;&#114;&#x6b;&#x40;&#x62;&#x6f;&#x6f;&#x74;&#x2e;&#97;&#114;&#x74;">&#x66;&#114;&#97;&#109;&#101;&#119;&#111;&#114;&#x6b;&#x40;&#x62;&#x6f;&#x6f;&#x74;&#x2e;&#97;&#114;&#x74;</a></p>
<p>  /data/dalvik-cache/arm64/system@<a href="mailto:&#102;&#114;&#97;&#x6d;&#101;&#119;&#111;&#114;&#107;&#x40;&#x62;&#x6f;&#x6f;&#x74;&#46;&#111;&#x61;&#x74;">&#102;&#114;&#97;&#x6d;&#101;&#119;&#111;&#114;&#107;&#x40;&#x62;&#x6f;&#x6f;&#x74;&#46;&#111;&#x61;&#x74;</a></p>
</blockquote>
<p>boot.art中包含了指向boot.oat中方法代码的指针，他被称为启动镜像（Boot Image），并且被加载的位置是固定的。boot.oat被加载的地址紧随着boot.art</p>
<h1 id="Dalvik到Art的转换"><a href="#Dalvik到Art的转换" class="headerlink" title="Dalvik到Art的转换"></a>Dalvik到Art的转换</h1><p>从源码入手很容易找到是如何转换的。关键代码如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// DevelopmentSettings.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SELECT_RUNTIME_PROPERTY = <span class="string">&quot;persist.sys.dalvik.vm.lib&quot;</span>;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">SystemProperties.<span class="built_in">set</span>(SELECT_RUNTIME_PROPERTY, newRuntimeValue);</span><br><span class="line"><span class="built_in">pokeSystemProperties</span>();</span><br><span class="line">PowerManager pm = (PowerManager)</span><br><span class="line">        context.<span class="built_in">getSystemService</span>(Context.POWER_SERVICE);</span><br><span class="line">pm.<span class="built_in">reboot</span>(null);</span><br></pre></td></tr></table></figure>

<p>这里的关键是”<strong>persist.sys.dalvik.vm.lib</strong>“属性的值在哪来被初始化和被读取。</p>
<p>回顾**<code>AndroidRuntime::start</code>**方法，查看如下代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// AndroidRuntime.cpp</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AndroidRuntime::start</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* className, <span class="keyword">const</span> <span class="keyword">char</span>* options)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* start the virtual machine */</span></span><br><span class="line">    JniInvocation jni_invocation;</span><br><span class="line">    jni_invocation.<span class="built_in">Init</span>(<span class="literal">NULL</span>);</span><br><span class="line">    JNIEnv* env;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">startVm</span>(&amp;mJavaVM, &amp;env) != <span class="number">0</span>) &#123; ①</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>两个关键函数：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">JniInvocation jni_invocation;</span><br><span class="line">jni_invocation.<span class="built_in">Init</span>(<span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure>

<p><strong>persist.sys.dalvik.vm.lib</strong>属性的值实际上就是so文件的路径，对应着libdvm.so与libart.so，前者是Dalvik虚拟机的实现，后者则是Art虚拟机的实现。</p>
<p><code>JniInvocation::Init</code>方法代码如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// JniInvocation.cpp</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">JniInvocation::Init</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* library)</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> HAVE_ANDROID_OS</span></span><br><span class="line">  <span class="keyword">char</span> default_library[PROPERTY_VALUE_MAX];</span><br><span class="line">  <span class="built_in">property_get</span>(<span class="string">&quot;persist.sys.dalvik.vm.lib&quot;</span>, default_library, <span class="string">&quot;libdvm.so&quot;</span>); ①</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span>* default_library = <span class="string">&quot;libdvm.so&quot;</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  <span class="keyword">if</span> (library == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    library = default_library;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handle_ = <span class="built_in">dlopen</span>(library, RTLD_NOW); ②</span><br><span class="line">  <span class="keyword">if</span> (handle_ == <span class="literal">NULL</span>) &#123; ③</span><br><span class="line">    <span class="built_in">ALOGE</span>(<span class="string">&quot;Failed to dlopen %s: %s&quot;</span>, library, <span class="built_in">dlerror</span>());</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">FindSymbol</span>(<span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">void</span>**&gt;(&amp;JNI_GetDefaultJavaVMInitArgs_), ④</span><br><span class="line">                  <span class="string">&quot;JNI_GetDefaultJavaVMInitArgs&quot;</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">FindSymbol</span>(<span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">void</span>**&gt;(&amp;JNI_CreateJavaVM_),</span><br><span class="line">                  <span class="string">&quot;JNI_CreateJavaVM&quot;</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">FindSymbol</span>(<span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">void</span>**&gt;(&amp;JNI_GetCreatedJavaVMs_),</span><br><span class="line">                  <span class="string">&quot;JNI_GetCreatedJavaVMs&quot;</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>分析代码逻辑很简单：</p>
<ol>
<li> 获取persist.sys.dalvik.vm.lib的属性值（libdvm.so或libart.so）</li>
<li> 通过dlopen加载这个so库</li>
<li> 如果加载出错就报错</li>
<li>确定so中包含了JNI接口需要的三个函数：<ul>
<li>  <code>JNI_GetDefaultJavaVMInitArgs</code></li>
<li>  <code>JNI_CreateJavaVM</code></li>
<li>  <code>JNI_GetCreatedJavaVMs</code></li>
</ul>
</li>
</ol>
<p><img src="http://inews.gtimg.com/newsapp_ls/0/13731089949/0" alt="Dalvik到Art的转换实现流程"></p>
<h1 id="ART虚拟机的启动过程"><a href="#ART虚拟机的启动过程" class="headerlink" title="ART虚拟机的启动过程"></a>ART虚拟机的启动过程</h1><p>ART虚拟机的源码位于下面的路径：</p>
<blockquote>
<p>  /art/runtime</p>
</blockquote>
<p>关键实现在函数接口JNI_createJavaVM中，源码如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// java_vm_ext.cc</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function">jint <span class="title">JNI_CreateJavaVM</span><span class="params">(JavaVM** p_vm, JNIEnv** p_env, <span class="keyword">void</span>* vm_args)</span> </span>&#123;</span><br><span class="line">  <span class="function">ScopedTrace <span class="title">trace</span><span class="params">(__FUNCTION__)</span></span>;</span><br><span class="line">  <span class="keyword">const</span> JavaVMInitArgs* args = <span class="keyword">static_cast</span>&lt;JavaVMInitArgs*&gt;(vm_args);</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">IsBadJniVersion</span>(args-&gt;version)) &#123;</span><br><span class="line">    <span class="built_in">LOG</span>(ERROR) &lt;&lt; <span class="string">&quot;Bad JNI version passed to CreateJavaVM: &quot;</span> &lt;&lt; args-&gt;version;</span><br><span class="line">    <span class="keyword">return</span> JNI_EVERSION;</span><br><span class="line">  &#125;</span><br><span class="line">  RuntimeOptions options;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args-&gt;nOptions; ++i) &#123;</span><br><span class="line">    JavaVMOption* option = &amp;args-&gt;options[i];</span><br><span class="line">    options.<span class="built_in">push_back</span>(std::<span class="built_in">make_pair</span>(std::<span class="built_in">string</span>(option-&gt;optionString), option-&gt;extraInfo));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">bool</span> ignore_unrecognized = args-&gt;ignoreUnrecognized;</span><br><span class="line">  <span class="keyword">if</span> (!Runtime::<span class="built_in">Create</span>(options, ignore_unrecognized)) &#123;</span><br><span class="line">    <span class="keyword">return</span> JNI_ERR;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Initialize native loader. This step makes sure we have</span></span><br><span class="line">  <span class="comment">// everything set up before we start using JNI.</span></span><br><span class="line">  android::<span class="built_in">InitializeNativeLoader</span>();</span><br><span class="line"></span><br><span class="line">  Runtime* runtime = Runtime::<span class="built_in">Current</span>();</span><br><span class="line">  <span class="keyword">bool</span> started = runtime-&gt;<span class="built_in">Start</span>();</span><br><span class="line">  <span class="keyword">if</span> (!started) &#123;</span><br><span class="line">    <span class="function"><span class="keyword">delete</span> <span class="title">Thread::Current</span><span class="params">()</span>-&gt;<span class="title">GetJniEnv</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="keyword">delete</span> runtime-&gt;<span class="built_in">GetJavaVM</span>();</span><br><span class="line">    <span class="built_in">LOG</span>(WARNING) &lt;&lt; <span class="string">&quot;CreateJavaVM failed&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> JNI_ERR;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  *p_env = Thread::<span class="built_in">Current</span>()-&gt;<span class="built_in">GetJniEnv</span>();</span><br><span class="line">  *p_vm = runtime-&gt;<span class="built_in">GetJavaVM</span>();</span><br><span class="line">  <span class="keyword">return</span> JNI_OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码逻辑较为复杂，ART启动流程如下：</p>
<p><img src="http://inews.gtimg.com/newsapp_ls/0/13731089997/0" alt="Art_satrt"></p>
<p>由此可以看出，ART虚拟机的启动，牵扯到了：创建堆、设置线程、加载基础类、创建系统类加载器以及启动虚拟机需要的daemon工作。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>-安卓系统</tag>
      </tags>
  </entry>
</search>
