<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Sat Jun 05 2021 00:00:00 GMT+0800 (中国标准时间)</title>
    <url>/2021/06/06/2021-06-05/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="a3b55306612ee53a37f23da232cceb35b93f2e31f1eec17edf688ee74702a643">7de32af07c700928393a01a5ca7d4983b0b6f34881f0fdc392407329710b38c2f689c21c5e6406d22769e33a672a914d7027f97aad1d6099c1c029d410b80f36e2e257eff953bbcf7c761f23cbe9da7ac2935e2ff109198c87895d9e65fc2dc83eee21de14005dc732a547a99e2a536e96a69d8d6d4130a3f90dcaa872d38b7e4a50b450ef18fa339d020fa31b8d004d3e761fb559fc64218487b63b5696ca2800e81ff557c36553be4ca5e889c0b290f73711809f42326e1b3d57a85086fef79b584112bc7fc677c6160632c6940201b3130df67415764550f6381e6737c66a7c863974adbbf353d55bbb42516afb95781036585a6a943fb066e6f1df3de9f3e73dd36716a91b257fad55d72fdbff79bf018238cf26a6cea9dcb568bf724258ed7737388f7c068baa3a936c8b251968fa4957787f4942a172cbe6b0a4317e34f0e36fde8083df53a42fa01346a417393b9da02f497595a809b52de5e1c3973dfd84847a858a3322bcca0754d0bc9de0a441bf51b9e3bfe71b0f4f254b7bbb8f60260989a1eb187c33a655481de56376e6611c77113bf19ac8b35e3f9351d438b1f04844adcc199daea633945e8712ace56fe66d50327a0d7ae3ca4d6021514e0954556e81f1657491e4e505703cb363f9380b0542cde5e87547e8de1c7396233f2bb63cb6d45c833b39315cb3667de18fe3647c3bcdb18e3ea486ceba13dda37e86d95942e05967b40096e2c522d6b14d8187860567bce47cce28276baa9ae87119f20f2ae4e8fe037ae58f59e03bd15981757ece645417a29b50577b9487bb9523eda2b626a1c9a05b4428dcf8f41060e7464daa466343748d61d059b2e479ec6579291595096a8d64f3f9dbddfde3f0dadcf3a380bd8c5a9785044681a9173da270df596bda31ef3a58be09d9eebc7829cfc75601a792f596fcdd1561b916cf54911ba5a46427f03222196428230ce28cdb00a02a70529cf34d542cedfb1667c71a90f2c5be6f5ccf5b4269c20b9a71eac46e1c90dfe9c0d8bb9957cdc7c296496653f6286a9238818c9c03d1d4c135b2900b325c4ecca6f3f4fa054b7483945a6f206059a59bedb25573d944ce85b9f3a13916a1fd76eb1937d41d5e3454ca64f6d84014fa83b8bbc0c692182d1946c67dda901bbc5c26d288d48e428fa093b9dc85d06289499c68382aa1faff9c45d711b55e98285231ad821da3ea93f204199bc31e86b754d71f2b21bfa58c06932f47c0825ca04693b0cec25267e7007d14a61220f510a96a053d67c55297228f30a94520db0a42f85cd7b7d13f8bf456fe4d40af778844fa8158a8ee00088f42c763d2e504d80d3021f4146fa15f7973a6ff90c9b4d74432f11f2ea62c0e7da3a1dc9c5ab253de4de4e4ac2ef17d6c90886eaffbafbf6d1f394a90d6bceac228fc7cae7adec88709b8598336cee75c7f137760f4306ac1b4bac1a21111fecc6e799b0c5417d7b3bc66bc97029f7ab75450369daea9e31ec5bce346f9eae9ef8b101d214786d2b137e3f679dd2df455aa8e4e64b055a71c9ad8bcd85733386e553a5ff31ae8973709733ea3fbdb2c18623523fec80e3b5991256c0f9e4aaea1607c9d2a94809c46e503e6db5d22bae1943a821584e5c1ab30ff691f78a0d1fc2c8d89deba4d2e931594cfaf8ddd01d1df3a4ddf1c6aaba9403b00ae0b774cdbc234b0ceaa6275395f3e9ae20e0bdfc111c5ff68408fde35a9e019d9be792f4fb9b7d543836cc0c52b9f508429b59eaa71375400b3820a09756f66f8d78f34b6c442d1f1ba119b107c4989cd9218002ab8dbf59699194629970e495b232d91ce753ec4d775f2e3df8e1a49f5980709350c4f23f19b7f300c511cfd5d7747013a2f53812bfa8dbd3e80f4555e9660374820d62f7100a4a2eb834e08cb3dd20844e957c022de6c05d2812540f4e5814a65017e4a471df898c7ad8b1aabf1ed3bfadc748303e63aff46886cea380ba5c2a1a03a338ed74a03fc23825f8557361e79d785c1b27b143489aba533f46bdcd6af0d27d8d5268a1467154d0a859115c49de98ebd6b79281350a0ec1b8556681e24440a303bfd684e4f6079ede78c84dd632bcfa499efffb6b8267abe18cc7055d69b90cf6c4372a397ed98a7dcca635675f223cb65596998c0ed1ea970e8e1acf6c2b82afe4b8be5a777d9f5c9928a41e86bdd8fcdabeb1edf8ab08bacca98c13ecff5b24d503514b01fc4b99da9686f4f87fb7c74b4ecc92eaed92c5b5980b25e9df832d2775817c1809a1ad9374bbdd246927d3095ff9477d1998f38bd4b89d02eddd00e421268b289e84f26cfc0b8df291f6f1ed7161d68a10b9cc00734fc97a23d3c8554751ebd110acf186f91f10663db358136bb0cd6f9b86246cdeda25982672ac96e2682f3770b98d39720cab66497e3a6e82a5f67e701bf88a7de2d30ba70163363a511c0b39b8ccbcfac29c9dd9241dbc30a8ae88f386a4669be7ea3b9b6c7c217c8f82e50f6e76d714ec0e9a0324586dbb758a45c6634cdab7e8c29353321b7408e685635e75e73fa9accc5b4d20fd249b97926284ff47e5ec3a7ca7dbaeda1f3fe9bb249176a7640f6e4f7fe88e4f0d3c677c3f55954e808c5d7c0f7e07cec151ebb1aa0d0aad88537b15d5c4161bf089dbdff1f990a8abb6795ae136f460ae71c3635921610797df864e9aed07c39b891ed2679efc11ce51237de128e83d886c74f6476727cc2acc9eb719f0e09918216e5cb2135290dc7e9e950951a76181cbccff3b22fe8056854dc20d901a9965d713c25cfdda2b438fe6aa8363664f42c4421d527624ed65175fb4e8221f1b59658adb4d6e858d838166aedb329c45f342cc94bf73f82a8688c85c325e99ef830307f38a669c344a6f2cfc64fa381194f84a1b0d510949f226f835b3cdca894b7600668c0a6d1ee646f713082f10eaea67ec4b8b5404f1a9b6145709b3256a7d67b4302c7573f5804996bcbef73ce9823e49961372e1702cc5c2457c61c4e36032b0e607248e583a8352a4a98921647be496b39d5dee803e06092c4b67daf211af668c408dac48f9f6b659aa76e1b21e9b8c86a0cf2d4fd6935454bdc9da43ab6dce3ed7feb3acea675dc424a2d6005e585662c92c6919fbd852a3bf4dcde8344dd441cec0be361519103368ba43d3fbef87887e3581ce7cf774458e60f5ec4c16aff32136985040e2b3826d6c7fd46128289c4b8d896ad3c772690f1e5f20b17e51e6d36342096548e9a72e66db307b0a5fbdda784755dc6f3909fbba88539a6b39c713c42e04b3162e2e39ca8b94ca81a9cf3d365be623b6b3cecc5da2195f7079ef067a46327d1a4ff46f7917262d0b61d0172294a288e45ed8f532829e49a41f9d9ccb89bbeb285bc135add84fcbaf4228981b611effe8df51942ecb99e16bcc55a963264157d86ff24ed854a958f7f88c6a0ceb13f5ecdf5ec2cd1f835359a59290c44bbcc1b7f3c13e934c7222ba71ac6f99e28f3164bee6e6dad3c1ec1ff6ef34ab6eea3255ba3240eee34f1cb7e5ef3d9b197a4492e5615211723fd95ae1bbdb437154dc392994e3efb1e9cd1e11e35eb569451d434a0608e27bc014f2d18ec772dca36d2d7aa72bc5763363508b450669e0d38a7d1a0c48b18c5c7cccae237f655968d55220ca198c34426261ec6a8b38afb2b2957a211cb622f455388a6cf8002979b4ef76e9b647e7b237a2373c676c1f11db251f9b527fe3a4227500105118a938fa227b3bd583ad59970ee83159c3c7b7686011f873757144d7aa65ce9c270bdead0522fee</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Diary</category>
      </categories>
  </entry>
  <entry>
    <title>Unicorn之模拟调用so文件</title>
    <url>/2021/06/03/Unicorn/</url>
    <content><![CDATA[<h3 id="一、Unicorn中的接口"><a href="#一、Unicorn中的接口" class="headerlink" title="一、Unicorn中的接口"></a>一、Unicorn中的接口</h3><h5 id="1、内存相关"><a href="#1、内存相关" class="headerlink" title="1、内存相关"></a>1、内存相关</h5><ul>
<li>  uc_mem_map</li>
<li>  uc_mem_write</li>
<li>  uc_mem_read</li>
</ul>
<h5 id="2、寄存器相关"><a href="#2、寄存器相关" class="headerlink" title="2、寄存器相关"></a>2、寄存器相关</h5><ul>
<li>  uc_reg_write</li>
<li>  uc_reg_read</li>
</ul>
<p><strong>TEST</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> unicorn</span><br><span class="line"><span class="keyword">import</span> capstone</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Test_Arm32_Thumb</span>():</span></span><br><span class="line">    <span class="comment">#硬编码</span></span><br><span class="line">    CODE = <span class="string">b&#x27;\x0a\x46\x03\x46&#x27;</span></span><br><span class="line">    <span class="comment">#基地址</span></span><br><span class="line">    ADDRESS = <span class="number">0x1000</span></span><br><span class="line">    <span class="comment">#映射大小</span></span><br><span class="line">    SIZE = <span class="number">1024</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#创建反汇编引擎对象</span></span><br><span class="line">    CP = capstone.Cs(capstone.CS_ARCH_ARM,capstone.CS_MODE_THUMB)</span><br><span class="line">    <span class="comment">#读取反汇编代码</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> CP.disasm(CODE,ADDRESS):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[addr:%X]:\t%s\t%s&quot;</span> % (i.address,i.mnemonic,i.op_str))</span><br><span class="line"></span><br><span class="line">    <span class="comment">#创建虚拟机对象</span></span><br><span class="line">    mu = unicorn.Uc(unicorn.UC_ARCH_ARM,unicorn.UC_MODE_THUMB)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#映射内存</span></span><br><span class="line">    mu.mem_map(ADDRESS,SIZE)</span><br><span class="line">    <span class="comment">#往内存写入代码</span></span><br><span class="line">    mu.mem_write(ADDRESS,CODE)</span><br><span class="line">    <span class="comment">#读取指定内存地址，return：bytesarray</span></span><br><span class="line">    <span class="built_in">bytes</span> = mu.mem_read(ADDRESS,<span class="number">10</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;ADDRESS:%X,content:%s&quot;</span> % (ADDRESS,binascii.b2a_hex(<span class="built_in">bytes</span>)))</span><br><span class="line"></span><br><span class="line">    <span class="comment">#写入寄存器的值。arg_1：寄存器表达值，宏定义</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    UC_ARM_REG_R0 = 66</span></span><br><span class="line"><span class="string">    UC_ARM_REG_R1 = 67</span></span><br><span class="line"><span class="string">    UC_ARM_REG_R2 = 68</span></span><br><span class="line"><span class="string">    UC_ARM_REG_R3 = 69</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    mu.reg_write(unicorn.arm_const.UC_ARM_REG_R1,<span class="number">0x100</span>)</span><br><span class="line">    mu.reg_write(unicorn.arm_const.UC_ARM_REG_R0,<span class="number">0x200</span>)</span><br><span class="line"></span><br><span class="line">    reg_R3 = mu.reg_read(unicorn.arm_const.UC_ARM_REG_R3)</span><br><span class="line">    reg_R2 = mu.reg_read(unicorn.arm_const.UC_ARM_REG_R2)</span><br><span class="line">    reg_R1 = mu.reg_read(unicorn.arm_const.UC_ARM_REG_R1)</span><br><span class="line">    reg_R0 = mu.reg_read(unicorn.arm_const.UC_ARM_REG_R0)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-------before-------&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;reg_R0:%x&quot;</span> % (reg_R0))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;reg_R1:%x&quot;</span> % (reg_R1))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;reg_R3:%x&quot;</span> % (reg_R3))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;reg_R2:%x&quot;</span> % (reg_R2))</span><br><span class="line"></span><br><span class="line">    <span class="comment">#启动虚拟机执行代码。arg_1：开始地址、arg_2：结束地址</span></span><br><span class="line">    mu.emu_start(ADDRESS + <span class="number">1</span>,ADDRESS + <span class="built_in">len</span>(CODE))   <span class="comment">#ADDRESS + 1 ：是因为是执行Thumb格式代码，指令首地址都是奇数（很重要）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#读取寄存器的值。arg_1：寄存器表达值，宏定义</span></span><br><span class="line">    reg_R3 = mu.reg_read(unicorn.arm_const.UC_ARM_REG_R3)</span><br><span class="line">    reg_R2 = mu.reg_read(unicorn.arm_const.UC_ARM_REG_R2)</span><br><span class="line">    reg_R1 = mu.reg_read(unicorn.arm_const.UC_ARM_REG_R1)</span><br><span class="line">    reg_R0 = mu.reg_read(unicorn.arm_const.UC_ARM_REG_R0)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-------after-------&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;reg_R0:%x&quot;</span> % (reg_R0))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;reg_R1:%x&quot;</span> % (reg_R1))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;reg_R3:%x&quot;</span> % (reg_R3))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;reg_R2:%x&quot;</span> % (reg_R2))</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    Test_Arm32_Thumb()</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">output:</span></span><br><span class="line"><span class="string">[addr:1000]:	mov	r2, r1</span></span><br><span class="line"><span class="string">[addr:1002]:	mov	r3, r0</span></span><br><span class="line"><span class="string">ADDRESS:1000,content:b&#x27;0a460346000000000000&#x27;</span></span><br><span class="line"><span class="string">-------before-------</span></span><br><span class="line"><span class="string">reg_R0:200</span></span><br><span class="line"><span class="string">reg_R1:100</span></span><br><span class="line"><span class="string">reg_R3:0</span></span><br><span class="line"><span class="string">reg_R2:0</span></span><br><span class="line"><span class="string">-------after-------</span></span><br><span class="line"><span class="string">reg_R0:200</span></span><br><span class="line"><span class="string">reg_R1:100</span></span><br><span class="line"><span class="string">reg_R3:200</span></span><br><span class="line"><span class="string">reg_R2:100</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p><img src="http://inews.gtimg.com/newsapp_ls/0/13610781004/0" alt="image-20210526101043331"></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>安卓调试</tag>
      </tags>
  </entry>
  <entry>
    <title>2021XCTF_FINAL APK</title>
    <url>/2021/06/06/2021XCTF_FINAL_APK/</url>
    <content><![CDATA[<h3 id="一、Java层分析"><a href="#一、Java层分析" class="headerlink" title="一、Java层分析"></a>一、Java层分析</h3><p>​    拿到apk直接丢进Jadx中进行Java层分析，刚看到MainActivity函数发现代码量不少，顿时感觉这题不简单，但也不要慌，仔细分析下来，发现几个可疑的函数：InMemoryDexClassLoader、BaseDexClassLoader。了解壳和动态dex加载原理的人一眼就可以发现这个init()函数只是在动态加载一个dex。</p>
<p><img src="http://inews.gtimg.com/newsapp_ls/0/13618498536/0" alt="image-20210606005557207"></p>
<p>由于没有真机运行环境，故只能找到dex数据流自己动手加载出来dex。很快便找到dex数据部分，是读取icon.png图片经过一系列操作生成的。</p>
<p><img src="http://inews.gtimg.com/newsapp_ls/0/13618498542/0" alt="image-20210606010006863"></p>
<p>这里可以把这段代码抄下来跑一遍就行(偷个懒)，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">		String fileName = <span class="string">&quot;.//icon.png&quot;</span>;</span><br><span class="line">		String fileName1 = <span class="string">&quot;.//111.dex&quot;</span>;</span><br><span class="line">		InputStream fis = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(fileName));</span><br><span class="line">		FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(fileName1));</span><br><span class="line">		ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">		<span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">		<span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">			<span class="keyword">int</span> bytesRead = fis.read(buffer,<span class="number">0</span>,buffer.length);</span><br><span class="line">			<span class="keyword">if</span> (bytesRead == -<span class="number">1</span>) &#123;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			baos.write(buffer,<span class="number">0</span>,bytesRead);</span><br><span class="line">		&#125;</span><br><span class="line">		baos.flush();</span><br><span class="line">		<span class="keyword">byte</span>[] dex = baos.toByteArray();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; dex.length; i ++) &#123;</span><br><span class="line">			dex[i] = (<span class="keyword">byte</span>) (dex[i] ^ -<span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		fos.write(dex,<span class="number">0</span>,dex.length);</span><br><span class="line">		fos.flush();</span><br><span class="line"> 		fos.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<pre><code> 接着分析新生成的dex文件，打开发现代码很清晰。关键代码在OOXX中，加密流程大致如下：先把flag进行tea加密(目前看来是tea)，然后回调com.ctf.play.MyCrack类的crack函数，发现是一个so层函数，等会在仔细分析。然后在进行tea加密，最后base64与com.ctf.play.MyCrack类的静态变量crypt比较。
</code></pre>
<p><img src="http://inews.gtimg.com/newsapp_ls/0/13618498548/0" alt="image-20210606011013270"></p>
<h3 id="二、so层分析"><a href="#二、so层分析" class="headerlink" title="二、so层分析"></a>二、so层分析</h3><p>​    ida打开，直接搜索crack函数发现没有找到，看来是动态注册或是加了混淆，先看JNI_OnLoad函数，发现东西还真是不少，字符串还做了异或处理。一看就有点像是反调试的代码，恢复一下字符串果真是防止frida注入。不过因为没有真机调试环境，所以这部分现在可以不用处理。在最后我们发现注册了一个cccc的函数。看来这就是我们要找的crack函数了。</p>
<p><img src="http://inews.gtimg.com/newsapp_ls/0/13618498559/0" alt="image-20210606011845928"></p>
<p>分析cccc函数发现和前面一样加了反frida的代码。关键函数是sub_7DFC，点进去看一下有点像AES算法，发现算法也不是很难，还是可以逆的。</p>
<p><img src="http://inews.gtimg.com/newsapp_ls/0/13618498565/0" alt="image-20210606012207605"></p>
<p><img src="http://inews.gtimg.com/newsapp_ls/0/13618498571/0" alt="image-20210606012227544"></p>
<p>算法代码如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BLOCK_SIZE  0x10</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> key_table[<span class="number">172</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> key[] = <span class="string">&quot;wonderfulday!!!!&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> byte_18CEC[] =</span><br><span class="line">        &#123;</span><br><span class="line">    <span class="number">0x8D</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x10</span>, <span class="number">0x20</span>, <span class="number">0x40</span>, <span class="number">0x80</span>, <span class="number">0x1B</span>,</span><br><span class="line">    <span class="number">0x36</span>, <span class="number">0x6C</span>, <span class="number">0xD8</span>, <span class="number">0xAB</span>, <span class="number">0x4D</span>, <span class="number">0x9A</span>, <span class="number">0x2F</span>, <span class="number">0x5E</span>, <span class="number">0xBC</span>, <span class="number">0x63</span>,</span><br><span class="line">    <span class="number">0xC6</span>, <span class="number">0x97</span>, <span class="number">0x35</span>, <span class="number">0x6A</span>, <span class="number">0xD4</span>, <span class="number">0xB3</span>, <span class="number">0x7D</span>, <span class="number">0xFA</span>, <span class="number">0xEF</span>, <span class="number">0xC5</span>,</span><br><span class="line">    <span class="number">0x91</span>, <span class="number">0x39</span>, <span class="number">0x72</span>, <span class="number">0xE4</span>, <span class="number">0xD3</span>, <span class="number">0xBD</span>, <span class="number">0x61</span>, <span class="number">0xC2</span>, <span class="number">0x9F</span>, <span class="number">0x25</span>,</span><br><span class="line">    <span class="number">0x4A</span>, <span class="number">0x94</span>, <span class="number">0x33</span>, <span class="number">0x66</span>, <span class="number">0xCC</span>, <span class="number">0x83</span>, <span class="number">0x1D</span>, <span class="number">0x3A</span>, <span class="number">0x74</span>, <span class="number">0xE8</span>,</span><br><span class="line">    <span class="number">0xCB</span>, <span class="number">0x8D</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x10</span>, <span class="number">0x20</span>, <span class="number">0x40</span>, <span class="number">0x80</span>,</span><br><span class="line">    <span class="number">0x1B</span>, <span class="number">0x36</span>, <span class="number">0x6C</span>, <span class="number">0xD8</span>, <span class="number">0xAB</span>, <span class="number">0x4D</span>, <span class="number">0x9A</span>, <span class="number">0x2F</span>, <span class="number">0x5E</span>, <span class="number">0xBC</span>,</span><br><span class="line">    <span class="number">0x63</span>, <span class="number">0xC6</span>, <span class="number">0x97</span>, <span class="number">0x35</span>, <span class="number">0x6A</span>, <span class="number">0xD4</span>, <span class="number">0xB3</span>, <span class="number">0x7D</span>, <span class="number">0xFA</span>, <span class="number">0xEF</span>,</span><br><span class="line">    <span class="number">0xC5</span>, <span class="number">0x91</span>, <span class="number">0x39</span>, <span class="number">0x72</span>, <span class="number">0xE4</span>, <span class="number">0xD3</span>, <span class="number">0xBD</span>, <span class="number">0x61</span>, <span class="number">0xC2</span>, <span class="number">0x9F</span>,</span><br><span class="line">    <span class="number">0x25</span>, <span class="number">0x4A</span>, <span class="number">0x94</span>, <span class="number">0x33</span>, <span class="number">0x66</span>, <span class="number">0xCC</span>, <span class="number">0x83</span>, <span class="number">0x1D</span>, <span class="number">0x3A</span>, <span class="number">0x74</span>,</span><br><span class="line">    <span class="number">0xE8</span>, <span class="number">0xCB</span>, <span class="number">0x8D</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x10</span>, <span class="number">0x20</span>, <span class="number">0x40</span>,</span><br><span class="line">    <span class="number">0x80</span>, <span class="number">0x1B</span>, <span class="number">0x36</span>, <span class="number">0x6C</span>, <span class="number">0xD8</span>, <span class="number">0xAB</span>, <span class="number">0x4D</span>, <span class="number">0x9A</span>, <span class="number">0x2F</span>, <span class="number">0x5E</span>,</span><br><span class="line">    <span class="number">0xBC</span>, <span class="number">0x63</span>, <span class="number">0xC6</span>, <span class="number">0x97</span>, <span class="number">0x35</span>, <span class="number">0x6A</span>, <span class="number">0xD4</span>, <span class="number">0xB3</span>, <span class="number">0x7D</span>, <span class="number">0xFA</span>,</span><br><span class="line">    <span class="number">0xEF</span>, <span class="number">0xC5</span>, <span class="number">0x91</span>, <span class="number">0x39</span>, <span class="number">0x72</span>, <span class="number">0xE4</span>, <span class="number">0xD3</span>, <span class="number">0xBD</span>, <span class="number">0x61</span>, <span class="number">0xC2</span>,</span><br><span class="line">    <span class="number">0x9F</span>, <span class="number">0x25</span>, <span class="number">0x4A</span>, <span class="number">0x94</span>, <span class="number">0x33</span>, <span class="number">0x66</span>, <span class="number">0xCC</span>, <span class="number">0x83</span>, <span class="number">0x1D</span>, <span class="number">0x3A</span>,</span><br><span class="line">    <span class="number">0x74</span>, <span class="number">0xE8</span>, <span class="number">0xCB</span>, <span class="number">0x8D</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x10</span>, <span class="number">0x20</span>,</span><br><span class="line">    <span class="number">0x40</span>, <span class="number">0x80</span>, <span class="number">0x1B</span>, <span class="number">0x36</span>, <span class="number">0x6C</span>, <span class="number">0xD8</span>, <span class="number">0xAB</span>, <span class="number">0x4D</span>, <span class="number">0x9A</span>, <span class="number">0x2F</span>,</span><br><span class="line">    <span class="number">0x5E</span>, <span class="number">0xBC</span>, <span class="number">0x63</span>, <span class="number">0xC6</span>, <span class="number">0x97</span>, <span class="number">0x35</span>, <span class="number">0x6A</span>, <span class="number">0xD4</span>, <span class="number">0xB3</span>, <span class="number">0x7D</span>,</span><br><span class="line">    <span class="number">0xFA</span>, <span class="number">0xEF</span>, <span class="number">0xC5</span>, <span class="number">0x91</span>, <span class="number">0x39</span>, <span class="number">0x72</span>, <span class="number">0xE4</span>, <span class="number">0xD3</span>, <span class="number">0xBD</span>, <span class="number">0x61</span>,</span><br><span class="line">    <span class="number">0xC2</span>, <span class="number">0x9F</span>, <span class="number">0x25</span>, <span class="number">0x4A</span>, <span class="number">0x94</span>, <span class="number">0x33</span>, <span class="number">0x66</span>, <span class="number">0xCC</span>, <span class="number">0x83</span>, <span class="number">0x1D</span>,</span><br><span class="line">    <span class="number">0x3A</span>, <span class="number">0x74</span>, <span class="number">0xE8</span>, <span class="number">0xCB</span>, <span class="number">0x8D</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x10</span>,</span><br><span class="line">    <span class="number">0x20</span>, <span class="number">0x40</span>, <span class="number">0x80</span>, <span class="number">0x1B</span>, <span class="number">0x36</span>, <span class="number">0x6C</span>, <span class="number">0xD8</span>, <span class="number">0xAB</span>, <span class="number">0x4D</span>, <span class="number">0x9A</span>,</span><br><span class="line">    <span class="number">0x2F</span>, <span class="number">0x5E</span>, <span class="number">0xBC</span>, <span class="number">0x63</span>, <span class="number">0xC6</span>, <span class="number">0x97</span>, <span class="number">0x35</span>, <span class="number">0x6A</span>, <span class="number">0xD4</span>, <span class="number">0xB3</span>,</span><br><span class="line">    <span class="number">0x7D</span>, <span class="number">0xFA</span>, <span class="number">0xEF</span>, <span class="number">0xC5</span>, <span class="number">0x91</span>, <span class="number">0x39</span>, <span class="number">0x72</span>, <span class="number">0xE4</span>, <span class="number">0xD3</span>, <span class="number">0xBD</span>,</span><br><span class="line">    <span class="number">0x61</span>, <span class="number">0xC2</span>, <span class="number">0x9F</span>, <span class="number">0x25</span>, <span class="number">0x4A</span>, <span class="number">0x94</span>, <span class="number">0x33</span>, <span class="number">0x66</span>, <span class="number">0xCC</span>, <span class="number">0x83</span>,</span><br><span class="line">    <span class="number">0x1D</span>, <span class="number">0x3A</span>, <span class="number">0x74</span>, <span class="number">0xE8</span>, <span class="number">0xCB</span></span><br><span class="line">        &#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> s_box[<span class="number">256</span>] =</span><br><span class="line">        &#123;</span><br><span class="line">    <span class="number">0x63</span>, <span class="number">0x7C</span>, <span class="number">0x77</span>, <span class="number">0x7B</span>, <span class="number">0xF2</span>, <span class="number">0x6B</span>, <span class="number">0x6F</span>, <span class="number">0xC5</span>, <span class="number">0x30</span>, <span class="number">0x01</span>, <span class="number">0x67</span>, <span class="number">0x2B</span>, <span class="number">0xFE</span>, <span class="number">0xD7</span>, <span class="number">0xAB</span>, <span class="number">0x76</span>,</span><br><span class="line">    <span class="number">0xCA</span>, <span class="number">0x82</span>, <span class="number">0xC9</span>, <span class="number">0x7D</span>, <span class="number">0xFA</span>, <span class="number">0x59</span>, <span class="number">0x47</span>, <span class="number">0xF0</span>, <span class="number">0xAD</span>, <span class="number">0xD4</span>, <span class="number">0xA2</span>, <span class="number">0xAF</span>, <span class="number">0x9C</span>, <span class="number">0xA4</span>, <span class="number">0x72</span>, <span class="number">0xC0</span>,</span><br><span class="line">    <span class="number">0xB7</span>, <span class="number">0xFD</span>, <span class="number">0x93</span>, <span class="number">0x26</span>, <span class="number">0x36</span>, <span class="number">0x3F</span>, <span class="number">0xF7</span>, <span class="number">0xCC</span>, <span class="number">0x34</span>, <span class="number">0xA5</span>, <span class="number">0xE5</span>, <span class="number">0xF1</span>, <span class="number">0x71</span>, <span class="number">0xD8</span>, <span class="number">0x31</span>, <span class="number">0x15</span>,</span><br><span class="line">    <span class="number">0x04</span>, <span class="number">0xC7</span>, <span class="number">0x23</span>, <span class="number">0xC3</span>, <span class="number">0x18</span>, <span class="number">0x96</span>, <span class="number">0x05</span>, <span class="number">0x9A</span>, <span class="number">0x07</span>, <span class="number">0x12</span>, <span class="number">0x80</span>, <span class="number">0xE2</span>, <span class="number">0xEB</span>, <span class="number">0x27</span>, <span class="number">0xB2</span>, <span class="number">0x75</span>,</span><br><span class="line">    <span class="number">0x09</span>, <span class="number">0x83</span>, <span class="number">0x2C</span>, <span class="number">0x1A</span>, <span class="number">0x1B</span>, <span class="number">0x6E</span>, <span class="number">0x5A</span>, <span class="number">0xA0</span>, <span class="number">0x52</span>, <span class="number">0x3B</span>, <span class="number">0xD6</span>, <span class="number">0xB3</span>, <span class="number">0x29</span>, <span class="number">0xE3</span>, <span class="number">0x2F</span>, <span class="number">0x84</span>,</span><br><span class="line">    <span class="number">0x53</span>, <span class="number">0xD1</span>, <span class="number">0x00</span>, <span class="number">0xED</span>, <span class="number">0x20</span>, <span class="number">0xFC</span>, <span class="number">0xB1</span>, <span class="number">0x5B</span>, <span class="number">0x6A</span>, <span class="number">0xCB</span>, <span class="number">0xBE</span>, <span class="number">0x39</span>, <span class="number">0x4A</span>, <span class="number">0x4C</span>, <span class="number">0x58</span>, <span class="number">0xCF</span>,</span><br><span class="line">    <span class="number">0xD0</span>, <span class="number">0xEF</span>, <span class="number">0xAA</span>, <span class="number">0xFB</span>, <span class="number">0x43</span>, <span class="number">0x4D</span>, <span class="number">0x33</span>, <span class="number">0x85</span>, <span class="number">0x45</span>, <span class="number">0xF9</span>, <span class="number">0x02</span>, <span class="number">0x7F</span>, <span class="number">0x50</span>, <span class="number">0x3C</span>, <span class="number">0x9F</span>, <span class="number">0xA8</span>,</span><br><span class="line">    <span class="number">0x51</span>, <span class="number">0xA3</span>, <span class="number">0x40</span>, <span class="number">0x8F</span>, <span class="number">0x92</span>, <span class="number">0x9D</span>, <span class="number">0x38</span>, <span class="number">0xF5</span>, <span class="number">0xBC</span>, <span class="number">0xB6</span>, <span class="number">0xDA</span>, <span class="number">0x21</span>, <span class="number">0x10</span>, <span class="number">0xFF</span>, <span class="number">0xF3</span>, <span class="number">0xD2</span>,</span><br><span class="line">    <span class="number">0xCD</span>, <span class="number">0x0C</span>, <span class="number">0x13</span>, <span class="number">0xEC</span>, <span class="number">0x5F</span>, <span class="number">0x97</span>, <span class="number">0x44</span>, <span class="number">0x17</span>, <span class="number">0xC4</span>, <span class="number">0xA7</span>, <span class="number">0x7E</span>, <span class="number">0x3D</span>, <span class="number">0x64</span>, <span class="number">0x5D</span>, <span class="number">0x19</span>, <span class="number">0x73</span>,</span><br><span class="line">    <span class="number">0x60</span>, <span class="number">0x81</span>, <span class="number">0x4F</span>, <span class="number">0xDC</span>, <span class="number">0x22</span>, <span class="number">0x2A</span>, <span class="number">0x90</span>, <span class="number">0x88</span>, <span class="number">0x46</span>, <span class="number">0xEE</span>, <span class="number">0xB8</span>, <span class="number">0x14</span>, <span class="number">0xDE</span>, <span class="number">0x5E</span>, <span class="number">0x0B</span>, <span class="number">0xDB</span>,</span><br><span class="line">    <span class="number">0xE0</span>, <span class="number">0x32</span>, <span class="number">0x3A</span>, <span class="number">0x0A</span>, <span class="number">0x49</span>, <span class="number">0x06</span>, <span class="number">0x24</span>, <span class="number">0x5C</span>, <span class="number">0xC2</span>, <span class="number">0xD3</span>, <span class="number">0xAC</span>, <span class="number">0x62</span>, <span class="number">0x91</span>, <span class="number">0x95</span>, <span class="number">0xE4</span>, <span class="number">0x79</span>,</span><br><span class="line">    <span class="number">0xE7</span>, <span class="number">0xC8</span>, <span class="number">0x37</span>, <span class="number">0x6D</span>, <span class="number">0x8D</span>, <span class="number">0xD5</span>, <span class="number">0x4E</span>, <span class="number">0xA9</span>, <span class="number">0x6C</span>, <span class="number">0x56</span>, <span class="number">0xF4</span>, <span class="number">0xEA</span>, <span class="number">0x65</span>, <span class="number">0x7A</span>, <span class="number">0xAE</span>, <span class="number">0x08</span>,</span><br><span class="line">    <span class="number">0xBA</span>, <span class="number">0x78</span>, <span class="number">0x25</span>, <span class="number">0x2E</span>, <span class="number">0x1C</span>, <span class="number">0xA6</span>, <span class="number">0xB4</span>, <span class="number">0xC6</span>, <span class="number">0xE8</span>, <span class="number">0xDD</span>, <span class="number">0x74</span>, <span class="number">0x1F</span>, <span class="number">0x4B</span>, <span class="number">0xBD</span>, <span class="number">0x8B</span>, <span class="number">0x8A</span>,</span><br><span class="line">    <span class="number">0x70</span>, <span class="number">0x3E</span>, <span class="number">0xB5</span>, <span class="number">0x66</span>, <span class="number">0x48</span>, <span class="number">0x03</span>, <span class="number">0xF6</span>, <span class="number">0x0E</span>, <span class="number">0x61</span>, <span class="number">0x35</span>, <span class="number">0x57</span>, <span class="number">0xB9</span>, <span class="number">0x86</span>, <span class="number">0xC1</span>, <span class="number">0x1D</span>, <span class="number">0x9E</span>,</span><br><span class="line">    <span class="number">0xE1</span>, <span class="number">0xF8</span>, <span class="number">0x98</span>, <span class="number">0x11</span>, <span class="number">0x69</span>, <span class="number">0xD9</span>, <span class="number">0x8E</span>, <span class="number">0x94</span>, <span class="number">0x9B</span>, <span class="number">0x1E</span>, <span class="number">0x87</span>, <span class="number">0xE9</span>, <span class="number">0xCE</span>, <span class="number">0x55</span>, <span class="number">0x28</span>, <span class="number">0xDF</span>,</span><br><span class="line">    <span class="number">0x8C</span>, <span class="number">0xA1</span>, <span class="number">0x89</span>, <span class="number">0x0D</span>, <span class="number">0xBF</span>, <span class="number">0xE6</span>, <span class="number">0x42</span>, <span class="number">0x68</span>, <span class="number">0x41</span>, <span class="number">0x99</span>, <span class="number">0x2D</span>, <span class="number">0x0F</span>, <span class="number">0xB0</span>, <span class="number">0x54</span>, <span class="number">0xBB</span>, <span class="number">0x16</span>,</span><br><span class="line">        &#125;;</span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">char</span> <span class="title">sub_8120</span><span class="params">(<span class="keyword">unsigned</span> __int8 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s_box[a1];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sub_7E84</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> __int8 v1; <span class="comment">// [sp+4h] [bp-1Ch]</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> j; <span class="comment">// [sp+8h] [bp-18h]</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> i; <span class="comment">// [sp+Ch] [bp-14h]</span></span><br><span class="line">    <span class="keyword">unsigned</span> __int8 v4[<span class="number">4</span>]; <span class="comment">// [sp+10h] [bp-10h]</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">3</span>; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">        key_table[<span class="number">4</span> * i] = *(<span class="keyword">unsigned</span> <span class="keyword">char</span> *)(key + <span class="number">4</span> * i);</span><br><span class="line">        key_table[<span class="number">4</span> * i + <span class="number">1</span>] = *(<span class="keyword">unsigned</span> <span class="keyword">char</span> *)(key + <span class="number">4</span> * i + <span class="number">1</span>);</span><br><span class="line">        key_table[<span class="number">4</span> * i + <span class="number">2</span>] = *(<span class="keyword">unsigned</span> <span class="keyword">char</span> *)(key + <span class="number">4</span> * i + <span class="number">2</span>);</span><br><span class="line">        key_table[<span class="number">4</span> * i + <span class="number">3</span>] = *(<span class="keyword">unsigned</span> <span class="keyword">char</span> *)(key + <span class="number">4</span> * i + <span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( i &lt;= <span class="number">0x2B</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt;= <span class="number">3</span>; ++j )</span><br><span class="line">            *(&amp;v4[<span class="number">0</span>] + j) = key_table[<span class="number">4</span> * i - <span class="number">4</span> + j];</span><br><span class="line">        <span class="keyword">if</span> ( !((<span class="keyword">unsigned</span> __int8)i &lt;&lt; <span class="number">30</span>) )</span><br><span class="line">        &#123;</span><br><span class="line">            v1 = v4[<span class="number">0</span>];</span><br><span class="line">            v4[<span class="number">0</span>] = v4[<span class="number">1</span>];</span><br><span class="line">            v4[<span class="number">1</span>] = v4[<span class="number">2</span>];</span><br><span class="line">            v4[<span class="number">2</span>] = v4[<span class="number">3</span>];</span><br><span class="line">            v4[<span class="number">3</span>] = v1;</span><br><span class="line">            v4[<span class="number">0</span>] = <span class="built_in">sub_8120</span>(v4[<span class="number">0</span>]);</span><br><span class="line">            v4[<span class="number">1</span>] = <span class="built_in">sub_8120</span>(v4[<span class="number">1</span>]);</span><br><span class="line">            v4[<span class="number">2</span>] = <span class="built_in">sub_8120</span>(v4[<span class="number">2</span>]);</span><br><span class="line">            v4[<span class="number">3</span>] = <span class="built_in">sub_8120</span>(v4[<span class="number">3</span>]);</span><br><span class="line">            v4[<span class="number">0</span>] ^= byte_18CEC[i &gt;&gt; <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        key_table[<span class="number">4</span> * i]     = key_table[<span class="number">4</span> * i - <span class="number">16</span>] ^ v4[<span class="number">0</span>];</span><br><span class="line">        key_table[<span class="number">4</span> * i + <span class="number">1</span>] = key_table[<span class="number">4</span> * i - <span class="number">15</span>] ^ v4[<span class="number">1</span>];</span><br><span class="line">        key_table[<span class="number">4</span> * i + <span class="number">2</span>] = key_table[<span class="number">4</span> * i - <span class="number">14</span>] ^ v4[<span class="number">2</span>];</span><br><span class="line">        key_table[<span class="number">4</span> * i + <span class="number">3</span>] = key_table[<span class="number">4</span> * i - <span class="number">13</span>] ^ v4[<span class="number">3</span>];</span><br><span class="line">        ++i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//native算法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">xor_block</span><span class="params">(<span class="keyword">int</span> idx, <span class="keyword">unsigned</span> <span class="keyword">char</span> buf[BLOCK_SIZE])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; BLOCK_SIZE; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        buf[i] ^= key_table[idx * BLOCK_SIZE + i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transform</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> buf[BLOCK_SIZE])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; BLOCK_SIZE; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        buf[i] = s_box[buf[i]];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">untransform</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> buf[BLOCK_SIZE])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; BLOCK_SIZE; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">bool</span> found = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">size_t</span> j = <span class="number">0</span>; j &lt; <span class="number">256</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (s_box[j] == buf[i])</span><br><span class="line">            &#123;</span><br><span class="line">                buf[i] = (<span class="keyword">unsigned</span> <span class="keyword">char</span>)j;</span><br><span class="line">                found = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">assert</span>(found);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">xchange_byte</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> buf[BLOCK_SIZE])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> c = buf[<span class="number">1</span>];</span><br><span class="line">    buf[<span class="number">1</span>] = buf[<span class="number">5</span>];</span><br><span class="line">    buf[<span class="number">5</span>] = buf[<span class="number">9</span>];</span><br><span class="line">    buf[<span class="number">9</span>] = buf[<span class="number">0xd</span>];</span><br><span class="line">    buf[<span class="number">0xd</span>] = c;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">swap</span>(buf[<span class="number">2</span>], buf[<span class="number">0xa</span>]);</span><br><span class="line">    <span class="built_in">swap</span>(buf[<span class="number">6</span>], buf[<span class="number">0xe</span>]);</span><br><span class="line"></span><br><span class="line">    c = buf[<span class="number">3</span>];</span><br><span class="line">    buf[<span class="number">3</span>] = buf[<span class="number">0xf</span>];</span><br><span class="line">    buf[<span class="number">0xf</span>] = buf[<span class="number">0xb</span>];</span><br><span class="line">    buf[<span class="number">0xb</span>] = buf[<span class="number">7</span>];</span><br><span class="line">    buf[<span class="number">7</span>] = c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unxchange_byte</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> buf[BLOCK_SIZE])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> c = buf[<span class="number">1</span>];</span><br><span class="line">    buf[<span class="number">1</span>] = buf[<span class="number">0xd</span>];</span><br><span class="line">    buf[<span class="number">0xd</span>] = buf[<span class="number">9</span>];</span><br><span class="line">    buf[<span class="number">9</span>] = buf[<span class="number">5</span>];</span><br><span class="line">    buf[<span class="number">5</span>] = c;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">swap</span>(buf[<span class="number">2</span>], buf[<span class="number">0xa</span>]);</span><br><span class="line">    <span class="built_in">swap</span>(buf[<span class="number">6</span>], buf[<span class="number">0xe</span>]);</span><br><span class="line"></span><br><span class="line">    c = buf[<span class="number">3</span>];</span><br><span class="line">    buf[<span class="number">3</span>] = buf[<span class="number">7</span>];</span><br><span class="line">    buf[<span class="number">7</span>] = buf[<span class="number">0xb</span>];</span><br><span class="line">    buf[<span class="number">0xb</span>] = buf[<span class="number">0xf</span>];</span><br><span class="line">    buf[<span class="number">0xf</span>] = c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">xor_scroll</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> buf[BLOCK_SIZE])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> buf_ = buf + i * <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">auto</span> o = buf_[<span class="number">0</span>];  <span class="comment">//save</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">auto</span> x = buf_[<span class="number">0</span>] ^ buf_[<span class="number">1</span>] ^ buf_[<span class="number">2</span>] ^ buf_[<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">auto</span> c = buf_[<span class="number">0</span>] ^ buf_[<span class="number">1</span>];</span><br><span class="line">        c = ((c &gt;&gt; <span class="number">7</span>) * <span class="number">0x1b</span>) ^ (c &lt;&lt; <span class="number">1</span>);</span><br><span class="line">        c ^= x;</span><br><span class="line">        buf_[<span class="number">0</span>] ^= c;</span><br><span class="line"></span><br><span class="line">        c = buf_[<span class="number">1</span>] ^ buf_[<span class="number">2</span>];</span><br><span class="line">        c = ((c &gt;&gt; <span class="number">7</span>) * <span class="number">0x1b</span>) ^ (c &lt;&lt; <span class="number">1</span>);</span><br><span class="line">        c ^= x;</span><br><span class="line">        buf_[<span class="number">1</span>] ^= c;</span><br><span class="line"></span><br><span class="line">        c = buf_[<span class="number">2</span>] ^ buf_[<span class="number">3</span>];</span><br><span class="line">        c = ((c &gt;&gt; <span class="number">7</span>) * <span class="number">0x1b</span>) ^ (c &lt;&lt; <span class="number">1</span>);</span><br><span class="line">        c ^= x;</span><br><span class="line">        buf_[<span class="number">2</span>] ^= c;</span><br><span class="line"></span><br><span class="line">        c = buf_[<span class="number">3</span>] ^ o;</span><br><span class="line">        c = ((c &gt;&gt; <span class="number">7</span>) * <span class="number">0x1b</span>) ^ (c &lt;&lt; <span class="number">1</span>);</span><br><span class="line">        c ^= x;</span><br><span class="line">        buf_[<span class="number">3</span>] ^= c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unxor_scroll</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> buf[BLOCK_SIZE])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> buf_ = buf + i * <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">size_t</span> m = <span class="number">0</span>; m &lt; <span class="number">3</span>; m++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">auto</span> o = buf_[<span class="number">0</span>];  <span class="comment">//save</span></span><br><span class="line">            <span class="keyword">auto</span> x = buf_[<span class="number">0</span>] ^ buf_[<span class="number">1</span>] ^ buf_[<span class="number">2</span>] ^ buf_[<span class="number">3</span>];</span><br><span class="line">            <span class="keyword">auto</span> c = buf_[<span class="number">0</span>] ^ buf_[<span class="number">1</span>];</span><br><span class="line">            c = ((c &gt;&gt; <span class="number">7</span>) * <span class="number">0x1b</span>) ^ (c &lt;&lt; <span class="number">1</span>);</span><br><span class="line">            c ^= x;</span><br><span class="line">            buf_[<span class="number">0</span>] ^= c;</span><br><span class="line"></span><br><span class="line">            c = buf_[<span class="number">1</span>] ^ buf_[<span class="number">2</span>];</span><br><span class="line">            c = ((c &gt;&gt; <span class="number">7</span>) * <span class="number">0x1b</span>) ^ (c &lt;&lt; <span class="number">1</span>);</span><br><span class="line">            c ^= x;</span><br><span class="line">            buf_[<span class="number">1</span>] ^= c;</span><br><span class="line"></span><br><span class="line">            c = buf_[<span class="number">2</span>] ^ buf_[<span class="number">3</span>];</span><br><span class="line">            c = ((c &gt;&gt; <span class="number">7</span>) * <span class="number">0x1b</span>) ^ (c &lt;&lt; <span class="number">1</span>);</span><br><span class="line">            c ^= x;</span><br><span class="line">            buf_[<span class="number">2</span>] ^= c;</span><br><span class="line"></span><br><span class="line">            c = buf_[<span class="number">3</span>] ^ o;</span><br><span class="line">            c = ((c &gt;&gt; <span class="number">7</span>) * <span class="number">0x1b</span>) ^ (c &lt;&lt; <span class="number">1</span>);</span><br><span class="line">            c ^= x;</span><br><span class="line">            buf_[<span class="number">3</span>] ^= c;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">encode</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> buf[BLOCK_SIZE])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">xor_block</span>(<span class="number">0</span>, buf);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">transform</span>(buf);</span><br><span class="line">        <span class="built_in">xchange_byte</span>(buf);</span><br><span class="line">        <span class="built_in">xor_scroll</span>(buf);</span><br><span class="line">        <span class="built_in">xor_block</span>(i, buf);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">transform</span>(buf);</span><br><span class="line">    <span class="built_in">xchange_byte</span>(buf);</span><br><span class="line">    <span class="built_in">xor_block</span>(<span class="number">10</span>, buf);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">decode</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> buf[BLOCK_SIZE])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">xor_block</span>(<span class="number">10</span>, buf);</span><br><span class="line">    <span class="built_in">unxchange_byte</span>(buf);</span><br><span class="line">    <span class="built_in">untransform</span>(buf);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">9</span>; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">xor_block</span>(i, buf);</span><br><span class="line">        <span class="built_in">unxor_scroll</span>(buf);</span><br><span class="line">        <span class="built_in">unxchange_byte</span>(buf);</span><br><span class="line">        <span class="built_in">untransform</span>(buf);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">xor_block</span>(<span class="number">0</span>, buf);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ttea</span><span class="params">(<span class="keyword">int</span> *seri,<span class="keyword">int</span> * key,<span class="keyword">int</span> tmp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i ++)</span><br><span class="line">        sum += tmp;</span><br><span class="line">    <span class="keyword">int</span> y = seri[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span> z = seri[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> a = key[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span> b = key[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> c = key[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">int</span> d = key[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        z -= (((y &lt;&lt; <span class="number">4</span>) + c) ^ (y + sum)) ^ ((y &gt;&gt; <span class="number">5</span>) + d);</span><br><span class="line">        y -= (((z &lt;&lt; <span class="number">4</span>) + a) ^ (z + sum)) ^ ((z &gt;&gt; <span class="number">5</span>) + b);</span><br><span class="line">        sum -= <span class="number">305419896</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    seri[<span class="number">0</span>] = y;</span><br><span class="line">    seri[<span class="number">1</span>] = z;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">sub_7E84</span>();</span><br><span class="line">    <span class="keyword">char</span> seri[] = &#123;<span class="number">9</span>,<span class="number">125</span>,<span class="number">-73</span>,<span class="number">27</span>,<span class="number">-62</span>,<span class="number">40</span>,<span class="number">100</span>,<span class="number">-6</span>,<span class="number">121</span>,<span class="number">-31</span>,<span class="number">-126</span>,<span class="number">25</span>,<span class="number">13</span>,<span class="number">-89</span>,<span class="number">-80</span>,<span class="number">57</span>&#125;;  </span><br><span class="line">    <span class="built_in">decode</span>((<span class="keyword">unsigned</span> <span class="keyword">char</span> *)seri);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d, &quot;</span>,seri[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>分析到这本来以为可以美滋滋的去拿flag了，但是结果总是解不对，只好又回来看看cccc函数，发现在aes后面还有一大段代码，初测猜测是改了算法的key或者cmp。</p>
<p><img src="http://inews.gtimg.com/newsapp_ls/0/13618498578/0" alt="image-20210606014401681"></p>
<p>果然通过so层把java层的代码给修改了，这里有两处都可以改动这个参数，由于没有动调不知道到底走那个，便怀着都试试的想法开始解密，结果却都是不正确。再回来看看，发现dword_4051C+0x16D496这一个偏移值修改了一个东西至于是什么就不知道了，当时卡在这里卡了好久，最开始的想法是用frida调用一下，然后开始去frida的反调试，很简单只要把exit函数ret就行。</p>
<p><img src="http://inews.gtimg.com/newsapp_ls/0/13618498587/0" alt="image-20210606014915874"></p>
<p><img src="http://inews.gtimg.com/newsapp_ls/0/13618498589/0" alt="image-20210606015125239"></p>
<p>结果搞了好久还是没有成功弄出来，不知道问题在哪，以后在仔细研究研究frida。</p>
<p>后来听到有的师傅说这个题和去年的kctf安卓题一样的设计思路，便跑去研究那个题，题还是很友好，可以调试i起来，发现dword_4051C就是dex的基址，所加的偏移恰好是tea的key和魔术。看来是第二次tea的参数变了。</p>
<p><img src="http://inews.gtimg.com/newsapp_ls/0/13618498595/0" alt="image-20210606020111014"></p>
<p><img src="http://inews.gtimg.com/newsapp_ls/0/13618498607/0" alt="image-20210606015639948"></p>
<p><img src="http://inews.gtimg.com/newsapp_ls/0/13618498618/0" alt="image-20210606015748265"></p>
<p><img src="http://inews.gtimg.com/newsapp_ls/0/13618498624/0" alt="image-20210606015924561"></p>
<p>总结一下总体流程：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//cmp = IgMDcaHeDcHTRr1SUS7urw==</span><br><span class="line">//key1 = &quot;youaresoclever!!&quot;</span><br><span class="line">//tmp1 = 0x12345678</span><br><span class="line">//key2 = &quot;zipMatcher&quot;</span><br><span class="line">//tmp2 = 0x515374A1</span><br><span class="line">//aes_ecb_key = wonderfulday!!!!</span><br></pre></td></tr></table></figure>

<h3 id="三、解题"><a href="#三、解题" class="headerlink" title="三、解题"></a>三、解题</h3><p>tea脚本：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.BadPaddingException;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.Cipher;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.IllegalBlockSizeException;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.KeyGenerator;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.NoSuchPaddingException;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.SecretKey;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class="line"><span class="keyword">import</span> java.security.SecureRandom;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OOXX</span> </span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> String key = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] ooxx(<span class="keyword">byte</span>[] content, <span class="keyword">int</span> offset, <span class="keyword">int</span>[] ooxxooxxoo) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] tempInt = byteToInt(content, offset);</span><br><span class="line">        <span class="keyword">int</span> y = tempInt[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> z = tempInt[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i ++)</span><br><span class="line">        	sum += tmp;</span><br><span class="line">        <span class="keyword">int</span> a = ooxxooxxoo[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> b = ooxxooxxoo[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> c = ooxxooxxoo[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">int</span> d = ooxxooxxoo[<span class="number">3</span>];</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">            z -= (((y &lt;&lt; <span class="number">4</span>) + c) ^ (y + sum)) ^ ((y &gt;&gt; <span class="number">5</span>) + d);</span><br><span class="line">            y -= (((z &lt;&lt; <span class="number">4</span>) + a) ^ (z + sum)) ^ ((z &gt;&gt; <span class="number">5</span>) + b);</span><br><span class="line">            sum -= tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        tempInt[<span class="number">0</span>] = y;</span><br><span class="line">        tempInt[<span class="number">1</span>] = z;</span><br><span class="line">        <span class="keyword">return</span> intToByte(tempInt, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] byteToInt(<span class="keyword">byte</span>[] content, <span class="keyword">int</span> offset) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[(content.length &gt;&gt; <span class="number">2</span>)];</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = offset; j &lt; content.length; j += <span class="number">4</span>) &#123;</span><br><span class="line">            result[i] = transform(content[j + <span class="number">3</span>]) | (transform(content[j + <span class="number">2</span>]) &lt;&lt; <span class="number">8</span>) | (transform(content[j + <span class="number">1</span>]) &lt;&lt; <span class="number">16</span>) | (content[j] &lt;&lt; <span class="number">24</span>);</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] intToByte(<span class="keyword">int</span>[] content, <span class="keyword">int</span> offset) &#123;</span><br><span class="line">        <span class="keyword">byte</span>[] result = <span class="keyword">new</span> <span class="keyword">byte</span>[(content.length &lt;&lt; <span class="number">2</span>)];</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = offset; j &lt; result.length; j += <span class="number">4</span>) &#123;</span><br><span class="line">            result[j + <span class="number">3</span>] = (<span class="keyword">byte</span>) (content[i] &amp; <span class="number">255</span>);</span><br><span class="line">            result[j + <span class="number">2</span>] = (<span class="keyword">byte</span>) ((content[i] &gt;&gt; <span class="number">8</span>) &amp; <span class="number">255</span>);</span><br><span class="line">            result[j + <span class="number">1</span>] = (<span class="keyword">byte</span>) ((content[i] &gt;&gt; <span class="number">16</span>) &amp; <span class="number">255</span>);</span><br><span class="line">            result[j] = (<span class="keyword">byte</span>) ((content[i] &gt;&gt; <span class="number">24</span>) &amp; <span class="number">255</span>);</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">transform</span><span class="params">(<span class="keyword">byte</span> temp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (temp &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> temp + <span class="number">256</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] ooxxoo(<span class="keyword">byte</span>[] info) &#123;</span><br><span class="line">        String ooxxooxxoo = key;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">16</span>; j++) &#123;</span><br><span class="line">            ooxxooxxoo = ooxxooxxoo + <span class="string">&quot;!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">byte</span>[] ooxxooxxooarray = ooxxooxxoo.getBytes();</span><br><span class="line">        <span class="keyword">int</span>[] ooxxooxxooxx = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">16</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++) &#123;</span><br><span class="line">            ooxxooxxooxx[i] = ooxxooxxooarray[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (info.length % <span class="number">8</span> != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">byte</span>[] result = <span class="keyword">new</span> <span class="keyword">byte</span>[info.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> offset = <span class="number">0</span>; offset &lt; result.length; offset += <span class="number">8</span>) &#123;</span><br><span class="line">            System.arraycopy(ooxx(info, offset, ooxxooxxooxx), <span class="number">0</span>, result, offset, <span class="number">8</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//cmp = IgMDcaHeDcHTRr1SUS7urw==</span></span><br><span class="line">        <span class="comment">//key1 = &quot;youaresoclever!!&quot;</span></span><br><span class="line">        <span class="comment">//tmp1 = 0x12345678</span></span><br><span class="line">        <span class="comment">//key2 = &quot;zipMatcher&quot;</span></span><br><span class="line">        <span class="comment">//tmp2 = 0x515374A1</span></span><br><span class="line">        <span class="comment">//aes_ecb_key = wonderfulday!!!!</span></span><br><span class="line">        String crypt = <span class="string">&quot;IgMDcaHeDcHTRr1SUS7urw==&quot;</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] content = Base64.getDecoder().decode(crypt);</span><br><span class="line">        key = <span class="string">&quot;zipMatcher&quot;</span>;</span><br><span class="line">        tmp = <span class="number">0x515374A1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] result = ooxxoo(content);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i ++)</span><br><span class="line">            System.out.print((<span class="keyword">int</span>)result[i] + <span class="string">&quot;,&quot;</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">//aes()</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] dofinal = <span class="keyword">new</span> <span class="keyword">byte</span>[] &#123;</span><br><span class="line">        	-<span class="number">84</span>, -<span class="number">67</span>, -<span class="number">53</span>, <span class="number">91</span>, -<span class="number">71</span>, -<span class="number">37</span>, <span class="number">60</span>, -<span class="number">39</span>, -<span class="number">97</span>, -<span class="number">66</span>, <span class="number">31</span>, <span class="number">122</span>, -<span class="number">125</span>, <span class="number">48</span>, <span class="number">31</span>, -<span class="number">126</span></span><br><span class="line">        &#125;;</span><br><span class="line">        key = <span class="string">&quot;youaresoclever!!&quot;</span>;</span><br><span class="line">        tmp = <span class="number">0x12345678</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] flag = ooxxoo(dofinal);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(flag));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="四、get-flag"><a href="#四、get-flag" class="headerlink" title="四、get flag"></a>四、get flag</h3><p><img src="http://inews.gtimg.com/newsapp_ls/0/13618498630/0" alt="image-20210606020622758"></p>
]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>安卓逆向</tag>
      </tags>
  </entry>
</search>
